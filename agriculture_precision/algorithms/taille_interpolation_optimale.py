# -*- coding: utf-8 -*-

"""
/***************************************************************************
 Precision Agriculture
                                 A QGIS plugin
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2020-07-21
        copyright            : (C) 2020 by ASPEXIT
        email                : cleroux@aspexit.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

__author__ = 'Lisa Rollier - ASPEXIT'
__date__ = '2020-07-21'
__copyright__ = '(C) 2020 by ASPEXIT'

# This will get replaced with a git SHA1 when you do a git archive

__revision__ = '$Format:%H$'

#import QColor

from qgis.PyQt.QtCore import QCoreApplication, QVariant
from qgis.core import (QgsProcessing,
                       QgsFeatureSink,
                       QgsProcessingAlgorithm,
                       QgsApplication,
                       QgsVectorLayer,
                       QgsDataProvider,
                       QgsVectorDataProvider,
                       QgsField,
                       QgsFeature,
                       QgsGeometry,
                       QgsPointXY,
                       QgsProcessingParameterVectorLayer,
                       QgsProcessingParameterFileDestination,
                       QgsProcessingParameterEnum,
                       QgsProcessingParameterNumber,
                       QgsProcessingParameterBoolean,
                       QgsProcessingUtils,
                       QgsMessageLog)

from qgis import processing 

import numpy as np
import pandas as pd
import scipy as sp
import math 

class TailleInterpolation(QgsProcessingAlgorithm):
    """
    
    """

    OUTPUT= 'OUTPUT'
    INPUT_POINT = 'INPUT_POINT'
    INPUT_CONTOUR = 'INPUT_CONTOUR'
    INPUT_MODEL = 'INPUT_MODEL'
    INPUT_NUGGET = 'INPUT_NUGGET'
    INPUT_STILL = 'INPUT_STILL'
    INPUT_RANGE = 'INPUT_RANGE'   
  

    def initAlgorithm(self, config):
        """
        Here we define the inputs and output of the algorithm, along
        with some other properties.
        """
        
        self.addParameter(
            QgsProcessingParameterVectorLayer(
                self.INPUT_POINT,
                self.tr('Point layer'),
                [QgsProcessing.TypeVectorPoint]
            )
        )
        
        self.addParameter(
            QgsProcessingParameterVectorLayer(
                self.INPUT_CONTOUR,
                self.tr('Field contour'),
                [QgsProcessing.TypeVectorPolygon]
            )
        )
                
        self.addParameter(
            QgsProcessingParameterEnum(
                self.INPUT_MODEL,
                self.tr('Variogram model'),
                ['Spherical','Exponential']
            )
        )
         
        self.addParameter(
            QgsProcessingParameterNumber(
                self.INPUT_NUGGET, 
                self.tr('Nugget effect'),
                QgsProcessingParameterNumber.Double
            )
        ) 
        
        self.addParameter(
            QgsProcessingParameterNumber(
                self.INPUT_STILL, 
                self.tr('Sill'),
                QgsProcessingParameterNumber.Double
            )
        ) 
        
        self.addParameter(
            QgsProcessingParameterNumber(
                self.INPUT_RANGE, 
                self.tr('Range'),
                QgsProcessingParameterNumber.Double
            )
        ) 
        
        self.addParameter(
            QgsProcessingParameterFileDestination(
                self.OUTPUT,
                self.tr('File'),
                '.csv',
            )
        )
        
        

    def processAlgorithm(self, parameters, context, feedback):
        """
        Here is where the processing itself takes place.
        """
        
        layer=self.parameterAsVectorLayer(parameters,self.INPUT_POINT,context) 
        area_layer=self.parameterAsVectorLayer(parameters,self.INPUT_CONTOUR,context) 
        Range = self.parameterAsDouble(parameters,self.INPUT_RANGE,context)
        sill = self.parameterAsDouble(parameters,self.INPUT_STILL,context)
        nugget =self.parameterAsDouble(parameters,self.INPUT_NUGGET,context)
        csv = self.parameterAsFileOutput(parameters, self.OUTPUT, context)
         
                                          
        if feedback.isCanceled():
            return {}
            
        nb_points=layer.featureCount()
        feature = area_layer.getFeature(0)
        area = feature.geometry().area()
       
        sp_density = nb_points/area
        C1P = sill - nugget
        
        #Sphérique
        if parameters['INPUT_MODEL'] == 0 :
            roots = np.roots([3*sp_density*C1P,0,3*sp_density*C1P*(Range**2),0,0,-Range**3])
            # permet de ne récupérer que les réel (limite effet de parties imaginaires négligeable)
            real_roots = roots.real[abs(roots.imag)<1e-5][0]
            size = math.ceil(2*real_roots) 
              
              
        else :
            lambert = sp.special.lambertw(((-1/6)*(2**(2/3)))/((sp_density*(Range**2))**(1/3))).real
            size = math.ceil(-6*Range*lambert)
        
                                           
        if feedback.isCanceled():
            return {}
                

        with open(csv, 'w') as output_file:
          line = 'Taille de la grille \n'
          output_file.write(line)
          line = str(size) + '\n'
          output_file.write(line)
            
                                           
        if feedback.isCanceled():
            return {}
                

        return{self.OUTPUT : csv} 

    def name(self):
        """
        Returns the algorithm name, used for identifying the algorithm. This
        string should be fixed for the algorithm, and must not be localised.
        The name should be unique within each provider. Names should contain
        lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return "V - Optimal grid size for interpolation"

    def displayName(self):
        """
        Returns the translated algorithm name, which should be used for any
        user-visible display of the algorithm name.
        """
        return self.tr(self.name())

    def group(self):
        """
        Returns the name of the group this algorithm belongs to. This string
        should be localised.
        """
        return self.tr('Spatial Analysis')

    def shortHelpString(self):
        short_help = self.tr(
            'Defines the optimal size of an interpolation grid for'
            'a given field (column) of a vector layer. The user must'
            'fill in the components of the theoretical variogram '
            'related to the chosen field [from Tisseyre et al. (2018) '
            'How to define the optimal grid size to map high resolution'
            'spatial data? Precision Agriculture]'
            '\nprovided by ASPEXIT\n'
            'author : Lisa Rollier'
        ) 
        return short_help


    def groupId(self):
        """
        Returns the unique ID of the group this algorithm belongs to. This
        string should be fixed for the algorithm, and must not be localised.
        The group id should be unique within each provider. Group id should
        contain lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'spatial_analysis'

    def tr(self, string):
        return QCoreApplication.translate('Processing', string)

    def createInstance(self):
        return TailleInterpolation()
