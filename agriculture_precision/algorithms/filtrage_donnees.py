# -*- coding: utf-8 -*-

"""
/***************************************************************************
 CentroideLisa
                                 A QGIS plugin
 test plugin centroide
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2020-07-07
        copyright            : (C) 2020 by Lisa R
        email                : dolisaob@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

__author__ = 'Lisa R'
__date__ = '2020-07-07'
__copyright__ = '(C) 2020 by Lisa R'

# This will get replaced with a git SHA1 when you do a git archive

__revision__ = '$Format:%H$'

#import QColor

from qgis.PyQt.QtCore import QCoreApplication, QVariant
from qgis.core import (QgsProcessing,
                       QgsFeatureSink,
                       QgsProcessingAlgorithm,
                       QgsApplication,
                       QgsVectorLayer,
                       QgsDataProvider,
                       QgsVectorDataProvider,
                       QgsField,
                       QgsFeature,
                       QgsGeometry,
                       QgsPointXY,
                       QgsProcessingParameterVectorLayer,
                       QgsProcessingParameterFeatureSink,
                       QgsProcessingParameterField,
                       QgsProcessingParameterEnum)

from qgis import processing 

import numpy as np
import pandas as pd

class FiltreDonnees(QgsProcessingAlgorithm):
    """
    
    """

    # Constants used to refer to parameters and outputs. They will be
    # used when calling the algorithm from another algorithm, or when
    # calling from the QGIS console.
    
    

    OUTPUT= 'OUTPUT'
    INPUT = 'INPUT'
    FIELD = 'FIELD'
    INPUT_METHOD = 'INPUT_METHOD'
    INPUT_CONFIANCE = 'INPUT_CONFIANCE'

    def initAlgorithm(self, config):
        """
        Here we define the inputs and output of the algorithm, along
        with some other properties.
        """
        # We add the input vector features source. It can have any kind of
        # geometry.
       
        
        self.addParameter(
            QgsProcessingParameterVectorLayer(
                self.INPUT,
                self.tr('Couche vecteur à filtrer')
            )
        )
        
        self.addParameter( 
            QgsProcessingParameterField( 
                self.FIELD, 
                self.tr( "Selection attribute" ), 
                QVariant(), 
                self.INPUT
            ) 
        )
        
        self.addParameter(
            QgsProcessingParameterEnum(
                self.INPUT_METHOD,
                self.tr('Méthode filtre à appliquer'),
                ['Règle des 3 sigmas','Règle de Tukey']
            )
        )
        
        self.addParameter(
            QgsProcessingParameterEnum(
                self.INPUT_CONFIANCE,
                self.tr('Intervale de confiance (Turkey)'),
                ['68%','95%', '99,5%']
            )
        )
       
       
        self.addParameter(
            QgsProcessingParameterFeatureSink(
                self.OUTPUT,
                self.tr('Couche filtrée')
            )
        )
        
        

    def processAlgorithm(self, parameters, context, feedback):
        """
        Here is where the processing itself takes place.
        """
        
        layer=self.parameterAsVectorLayer(parameters,self.INPUT,context) 
        
        new_fields = layer.fields()
        new_fields.append(QgsField('Aberrant', QVariant.Double))
        
        (sink, dest_id) = self.parameterAsSink(parameters,self.OUTPUT,context, new_fields, layer.wkbType(), layer.sourceCrs())
        method=self.parameterAsEnum(parameters,self.INPUT_METHOD,context)
        int_confiance=self.parameterAsEnum(parameters,self.INPUT_CONFIANCE,context)
        field_to_filter = self.parameterAsString(parameters,self.FIELD, context) 
        
        
        features = layer.getFeatures()
        #liste contenant les noms des champs
        field_list=[field.name() for field in layer.fields()]
        
        #on créé une matrice ou 1 ligne = 1 feature
        data = np.array([[feat[field_name] for field_name in field_list] for feat in features])
        
        #on créer le dataframe avec les données et les noms des colonnes
        df = pd.DataFrame(data, columns = field_list)
        
        if method == 0 :
            int_confiance+=1
            mean = df[field_to_filter].mean()
            sd = df[field_to_filter].std()
            #met 1 quand c'est aberrant, 0 sinon
            df['Aberrant'] = np.where((df[field_to_filter] > mean - int_confiance*sd) & (df[field_to_filter] < mean + int_confiance*sd) , 0, 1)
        
        else :
            pass
        #on transforme le dataframe en liste pour les attributs
        df_list=df.values.tolist()
        
        #initialisation de la liste des features
        featureList=[]
        
        #on va parcourrir chaque ligne, ie chaque feature
        for row in df_list:
            feat = QgsFeature()
            feat.setAttributes(row) #row = une ligne, définit les 4 attributs
            feat.setGeometry(QgsGeometry.fromPointXY(QgsPointXY(10,10))) #on définit que c'est des points
            featureList.append(feat) #on ajoute la feature à la liste

        sink.addFeatures(featureList)
        
        
        return{self.OUTPUT : dest_id} #donc c'est bien l'adresse ou se trouve l'objet qu'on veut mettre en sortie qu'on doit mettre
      

    def name(self):
        """
        Returns the algorithm name, used for identifying the algorithm. This
        string should be fixed for the algorithm, and must not be localised.
        The name should be unique within each provider. Names should contain
        lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'Filtrage des donnees aberrantes sur un vecteur'

    def displayName(self):
        """
        Returns the translated algorithm name, which should be used for any
        user-visible display of the algorithm name.
        """
        return self.tr(self.name())

    def group(self):
        """
        Returns the name of the group this algorithm belongs to. This string
        should be localised.
        """
        return self.tr('Action sur Vecteurs')

    def groupId(self):
        """
        Returns the unique ID of the group this algorithm belongs to. This
        string should be fixed for the algorithm, and must not be localised.
        The group id should be unique within each provider. Group id should
        contain lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'action_sur_vecteur'

    def tr(self, string):
        return QCoreApplication.translate('Processing', string)

    def createInstance(self):
        return FiltreDonnees()
