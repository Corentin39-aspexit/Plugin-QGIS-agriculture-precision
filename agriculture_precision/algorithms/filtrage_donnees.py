# -*- coding: utf-8 -*-

"""
/***************************************************************************
 Precision Agriculture
                                 A QGIS plugin
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2020-07-21
        copyright            : (C) 2020 by ASPEXIT
        email                : cleroux@aspexit.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

__author__ = 'Lisa Rollier - ASPEXIT'
__date__ = '2020-07-21'
__copyright__ = '(C) 2020 by ASPEXIT'

# This will get replaced with a git SHA1 when you do a git archive

__revision__ = '$Format:%H$'

#import QColor

from qgis.PyQt.QtCore import QCoreApplication, QVariant
from qgis.core import (QgsProcessing,
                       QgsFeatureSink,
                       QgsProcessingAlgorithm,
                       QgsApplication,
                       QgsVectorLayer,
                       QgsDataProvider,
                       QgsVectorDataProvider,
                       QgsField,
                       QgsFeature,
                       QgsGeometry,
                       QgsPointXY,
                       QgsProcessingParameterVectorLayer,
                       QgsProcessingParameterFeatureSink,
                       QgsProcessingParameterField,
                       QgsProcessingParameterEnum,
                       QgsProcessingParameterBoolean,
                       QgsProcessingParameterNumber)

from qgis import processing 

import numpy as np
import pandas as pd

class FiltreDonnees(QgsProcessingAlgorithm):
    """
    
    """

    OUTPUT= 'OUTPUT'
    INPUT = 'INPUT'
    FIELD = 'FIELD'
    INPUT_METHOD = 'INPUT_METHOD'
    INPUT_CONFIANCE = 'INPUT_CONFIANCE'
    BOOLEAN = 'BOOLEAN'
    INPUT_FIX_VAL = 'INPUT_FIX_VAL'
    INPUT_UP_BOUND = 'INPUT_UP_BOUND'
    INPUT_LOW_BOUND = 'INPUT_LOW_BOUND'

    def initAlgorithm(self, config):
        """
        Here we define the inputs and output of the algorithm, along
        with some other properties.
        """
        
        self.addParameter(
            QgsProcessingParameterVectorLayer(
                self.INPUT,
                self.tr('Layer to filter')
            )
        )
        
        self.addParameter( 
            QgsProcessingParameterField( 
                self.FIELD, 
                self.tr( "Field selection" ), 
                QVariant(),
                self.INPUT,
                type=QgsProcessingParameterField.Numeric
            ) 
        )
        
        self.addParameter(
            QgsProcessingParameterEnum(
                self.INPUT_METHOD,
                self.tr('Filtering method'),
                ['Normal distribution','Tukey’s rule','fix threshold']
            )
        )
        
        
        self.addParameter(
            QgsProcessingParameterEnum(
                self.INPUT_FIX_VAL,
                self.tr('Filtering range (for fix threshold method)'),
                ['Lower threshold','Higher threshold','Range (Lower and Higher Thresholds)']
            )
        )
        
        self.addParameter(
            QgsProcessingParameterNumber(
                self.INPUT_UP_BOUND,
                self.tr('Higher threshold'),
                QgsProcessingParameterNumber.Double,
                5
            )
        )
        
        self.addParameter(
            QgsProcessingParameterNumber(
                self.INPUT_LOW_BOUND,
                self.tr('Lower threshold'),
                QgsProcessingParameterNumber.Double,
                0.5
            )
        )        
        
        self.addParameter(
            QgsProcessingParameterEnum(
                self.INPUT_CONFIANCE,
                self.tr('Confidence interval (for normal distribution method)'),
                ['68%','95%', '99,5%']
            )
        )
       
        self.addParameter(
            QgsProcessingParameterBoolean(
                self.BOOLEAN,
                self.tr('Remove outliers')
            )
        )
       
        self.addParameter(
            QgsProcessingParameterFeatureSink(
                self.OUTPUT,
                self.tr('Filtered layer')
            )
        )
        
        

    def processAlgorithm(self, parameters, context, feedback):
        """
        Here is where the processing itself takes place.
        """
        
        layer=self.parameterAsVectorLayer(parameters,self.INPUT,context) 
        
        #on ajoute un nouveau champ 'Aberrant' dans la couche en sortie 
        new_fields = layer.fields()
        
        if not parameters['BOOLEAN'] :
            new_fields.append(QgsField('Aberrant', QVariant.Double))
        
        (sink, dest_id) = self.parameterAsSink(parameters,self.OUTPUT,context, new_fields, layer.wkbType(), layer.sourceCrs())
        method=self.parameterAsEnum(parameters,self.INPUT_METHOD,context)
        method_fix_val = self.parameterAsEnum(parameters,self.INPUT_FIX_VAL,context)
        int_confiance=self.parameterAsEnum(parameters,self.INPUT_CONFIANCE,context)
        field_to_filter = self.parameterAsString(parameters,self.FIELD, context) 
        
        if feedback.isCanceled():
            return {}
        

        
        features = layer.getFeatures()
        
        #liste contenant les noms des champs
        field_list=[field.name() for field in layer.fields()]
        
        #on créé une matrice ou 1 ligne = 1 feature
        data = np.array([[feat[field_name] for field_name in field_list] for feat in features])
                
        #on créer le dataframe avec les données et les noms des colonnes
        df = pd.DataFrame(data, columns = field_list)
        
        
        if method == 0 :
            int_confiance+=1
            mean = df[field_to_filter].mean()
            sd = df[field_to_filter].std()
            #met 1 quand c'est aberrant, 0 sinon
            df['Aberrant'] = np.where((df[field_to_filter] > mean - int_confiance*sd) & (df[field_to_filter] < mean + int_confiance*sd) , 0, 1)
        
        elif method == 1 :
            quartiles = df[field_to_filter].quantile([0.25,0.75])
            inter_quartiles = quartiles[0.75] - quartiles [0.25]
            df['Aberrant'] = np.where((df[field_to_filter] > quartiles[0.25] - inter_quartiles*1.5) & (df[field_to_filter] < quartiles[0.75] + inter_quartiles*1.5), 0, 1)
        
        else :
            if method_fix_val == 0 :
                df['Aberrant'] = np.where(df[field_to_filter] >= parameters['INPUT_LOW_BOUND'] , 0, 1)
            elif method_fix_val == 1 :
                df['Aberrant'] = np.where(df[field_to_filter] <= parameters['INPUT_UP_BOUND'] , 0, 1)
            else :
                df['Aberrant'] = np.where((df[field_to_filter] >= parameters['INPUT_LOW_BOUND']) & (df[field_to_filter] <= parameters['INPUT_UP_BOUND']) , 0, 1)
        
        if feedback.isCanceled():
            return {}
        

        #on va créer un dataframe avec les coordonnées, normalement les features sont parcourrues dans le même ordre
        features = layer.getFeatures()
        coordinates_arr = np.array([[feat.geometry().asPoint()[k] for k in range(2)] for feat in features])
        coordinates = pd.DataFrame(coordinates_arr, columns = ['X','Y'])
        df['X']=coordinates['X']
        df['Y']=coordinates['Y']    
        
        if feedback.isCanceled():
            return {}
        

        if parameters['BOOLEAN'] :
            indexNames = df[df['Aberrant'] == 1 ].index
            df.drop(indexNames , inplace=True)
            df.drop(columns = 'Aberrant')
        
        #on transforme le dataframe en liste pour les attributs
        df_list=df.values.tolist()
                
        
        if feedback.isCanceled():
            return {}
        
        
        featureList=[]
        
        #on va parcourrir chaque ligne, ie chaque feature
        for row in df_list:
            feat = QgsFeature()
            feat.setAttributes(row[0:-2]) #row = une ligne, on exclu les deux dernières colonnes qui sont les coordonnées
            feat.setGeometry(QgsGeometry.fromPointXY(QgsPointXY(row[-2],row[-1]))) #on définit la position de chaque point 
            featureList.append(feat) #on ajoute la feature à la liste
            
            if feedback.isCanceled():
                return {}
        


        #on ajoute la liste des features à la couche de sortie
        sink.addFeatures(featureList)
        
        if feedback.isCanceled():
            return {}
        

        
        return{self.OUTPUT : dest_id} 

    def name(self):
        """
        Returns the algorithm name, used for identifying the algorithm. This
        string should be fixed for the algorithm, and must not be localised.
        The name should be unique within each provider. Names should contain
        lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'V - Non Spatial univariate filtering'

    def displayName(self):
        """
        Returns the translated algorithm name, which should be used for any
        user-visible display of the algorithm name.
        """
        return self.tr(self.name())

    def group(self):
        """
        Returns the name of the group this algorithm belongs to. This string
        should be localised.
        """
        return self.tr('Filtering')

    def shortHelpString(self):
        short_help = self.tr(
            'Detects global outliers for a given field (column) of a vector '
            'layer using several filtering methods. Outliers can either be '
            'removed or identified in a new column in the vector layer.\n \n'
            ' - Normal distribution: Assuming a normal distribution of the'
            'data, the function identifies data within the ranges (mean +/- '
            '1 standard deviation; mean +/- 2 standard deviations; mean +/- '
            '3 standard deviations; and beyond). \n'
            '- Interquartile: also known as the Tukey’s rule'
            '\nprovided by ASPEXIT\n'
            'author : Lisa Rollier'            
        ) 
        return short_help


    def groupId(self):
        """
        Returns the unique ID of the group this algorithm belongs to. This
        string should be fixed for the algorithm, and must not be localised.
        The group id should be unique within each provider. Group id should
        contain lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'filtering'

    def tr(self, string):
        return QCoreApplication.translate('Processing', string)

    def createInstance(self):
        return FiltreDonnees()
