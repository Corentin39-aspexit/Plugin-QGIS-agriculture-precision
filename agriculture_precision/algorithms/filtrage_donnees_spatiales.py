# -*- coding: utf-8 -*-

"""
/***************************************************************************
 AgriculturePrecision
                                 A QGIS plugin
 Chaines de traitement
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2020-07-21
        copyright            : (C) 2020 by ASPEXIT
        email                : cleroux@aspexit.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

__author__ = 'ASPEXIT'
__date__ = '2020-07-21'
__copyright__ = '(C) 2020 by ASPEXIT'

# This will get replaced with a git SHA1 when you do a git archive

__revision__ = '$Format:%H$'

#import QColor

from qgis.PyQt.QtCore import QCoreApplication, QVariant
from qgis.core import (QgsProcessing,
                       QgsFeatureSink,
                       QgsProcessingAlgorithm,
                       QgsApplication,
                       QgsVectorLayer,
                       QgsDataProvider,
                       QgsVectorDataProvider,
                       QgsField,
                       QgsFeature,
                       QgsGeometry,
                       QgsPointXY,
                       QgsProcessingParameterVectorLayer,
                       QgsProcessingParameterFeatureSink,
                       QgsProcessingParameterField,
                       QgsProcessingParameterEnum,
                       QgsProcessingParameterBoolean,
                       QgsProcessingParameterNumber)

from qgis import processing 

import numpy as np
import pandas as pd
from scipy.spatial import distance

class FiltreDonneesSpatiales(QgsProcessingAlgorithm):
    """
    
    """

    OUTPUT= 'OUTPUT'
    INPUT = 'INPUT'
    FIELD = 'FIELD'
    INPUT_METHOD = 'INPUT_METHOD'
    INPUT_CONFIANCE = 'INPUT_CONFIANCE'
    BOOLEAN = 'BOOLEAN'
    INPUT_VOISINS = 'INPUT_VOISINS'
    INPUT_DISTANCE = 'INPUT_DISTANCE'
    BOOLEAN_DISTANCE = 'BOOLEAN_DISTANCE'
    INPUT_CV_MAX = 'INPUT_CV_MAX'

    def initAlgorithm(self, config):
        """
        Here we define the inputs and output of the algorithm, along
        with some other properties.
        """
        
        self.addParameter(
            QgsProcessingParameterVectorLayer(
                self.INPUT,
                self.tr('Couche vecteur à filtrer')
            )
        )
        
        self.addParameter( 
            QgsProcessingParameterField( 
                self.FIELD, 
                self.tr( "Selection du champ à filtrer" ), 
                QVariant(),
                self.INPUT,
                type=QgsProcessingParameterField.Numeric
            ) 
        )
        
        self.addParameter(
            QgsProcessingParameterEnum(
                self.INPUT_METHOD,
                self.tr('Méthode filtre à appliquer'),
                ['Règle des 3 sigmas','Coefficient de Variation']
            )
        )
        
        self.addParameter(
            QgsProcessingParameterEnum(
                self.INPUT_CONFIANCE,
                self.tr('Intervale de confiance (3 sigmas)'),
                ['68%','95%', '99,5%']
            )
        )
        
        
        self.addParameter(
            QgsProcessingParameterNumber(
                self.INPUT_VOISINS, 
                self.tr('Nombre de voisins'),
                QgsProcessingParameterNumber.Integer,
                5
            )
        ) 
        
        self.addParameter(
            QgsProcessingParameterNumber(
                self.INPUT_CV_MAX, 
                self.tr('Coefficient de variation maximum (Coefficient de variation)'),
                QgsProcessingParameterNumber.Double,
                2
            )
        ) 
        self.addParameter(
            QgsProcessingParameterBoolean(
                self.BOOLEAN_DISTANCE,
                self.tr('Considérer le voisinage dans une distance donnée')
            )
        )
        
        self.addParameter(
            QgsProcessingParameterNumber(
                self.INPUT_DISTANCE, 
                self.tr('Distance'),
                QgsProcessingParameterNumber.Double,
                5e-5
            )
        ) 
       
        self.addParameter(
            QgsProcessingParameterBoolean(
                self.BOOLEAN,
                self.tr('Supprimer les données aberrantes')
            )
        )
       
        self.addParameter(
            QgsProcessingParameterFeatureSink(
                self.OUTPUT,
                self.tr('Couche filtrée')
            )
        )
        
        

    def processAlgorithm(self, parameters, context, feedback):
        """
        Here is where the processing itself takes place.
        """
        
        layer=self.parameterAsVectorLayer(parameters,self.INPUT,context) 
        
        #on ajoute un nouveau champ 'Aberrant' dans la couche en sortie 
        new_fields = layer.fields()
        
        if not parameters['BOOLEAN'] :
            new_fields.append(QgsField('Aberrant', QVariant.Double))
        
        (sink, dest_id) = self.parameterAsSink(parameters,self.OUTPUT,context, new_fields, layer.wkbType(), layer.sourceCrs())
        method=self.parameterAsEnum(parameters,self.INPUT_METHOD,context)
        int_confiance=self.parameterAsEnum(parameters,self.INPUT_CONFIANCE,context)
        field_to_filter = self.parameterAsString(parameters,self.FIELD, context) 
        
        #on créer une matrice avec les coordonnées
        features = layer.getFeatures()
        coordinates_arr = np.array([[feat.geometry().asPoint()[k] for k in range(2)] for feat in features])
        
        #création de la matrice de distance
        dist_array = distance.cdist(coordinates_arr,coordinates_arr)
        
        #tri de la matrice selon les lignes
        sort_array = np.sort(dist_array,axis=1)
        
        if parameters['BOOLEAN_DISTANCE'] :
            min_dist_array = np.where(sort_array>parameters['INPUT_DISTANCE'],0, sort_array)
        #selection d'uniquement les premières "colonnes" : donc les plus proches voisins
        #creation d'une matrice ou chaque ligne correspond a une liste des distances des plus proches voisin pour un point (indiceligne = indice du point)
        else :
            min_dist_array = np.delete(sort_array,0,1)
            for k in range(parameters['INPUT_VOISINS'],len(sort_array[0])-1):
                min_dist_array = np.delete(min_dist_array,parameters['INPUT_VOISINS'],1)
                
        #nombre de points dans le shp
        nb_points = len(coordinates_arr)
        
        #creation d'une liste de liste : liste des index des voisins les plus proches pour chaque point
        neighbors = []
        for k in range (nb_points) :
            list = np.nonzero(np.in1d(dist_array[k],min_dist_array[k]))[0].tolist()
            neighbors.append(list)
        
        
        #création du dataframe de données
        features = layer.getFeatures()
        
        #liste contenant les noms des champs
        field_list=[field.name() for field in layer.fields()]
        
        #on créé une matrice ou 1 ligne = 1 feature
        data = np.array([[feat[field_name] for field_name in field_list] for feat in features])
                
        #on créer le dataframe avec les données et les noms des colonnes
        df = pd.DataFrame(data, columns = field_list)
        
        
        if method == 0 :
            int_confiance+=1
            mean = []
            sd = []
            for k in range (nb_points) :
                mean.append(df.iloc[neighbors[k]][field_to_filter].mean())
                sd.append(df.iloc[neighbors[k]][field_to_filter].std())
            df['mean'] = mean
            df['sd'] = sd
            
            
            #met 1 quand c'est aberrant, 0 sinon
            df['Aberrant'] = np.where((df[field_to_filter] > df['mean'] - int_confiance*df['sd']) & (df[field_to_filter] < df['mean'] + int_confiance*df['sd']), 0, 1)
            df = df.drop(columns = 'mean')
            df = df.drop(columns = 'sd')
        else :
           
            mean = []
            sd = []
            nb_neighbors = []
            for k in range (nb_points) :
                mean.append(df.iloc[neighbors[k]][field_to_filter].mean())
                sd.append(df.iloc[neighbors[k]][field_to_filter].std())
                nb_neighbors.append(len(neighbors[k]))
            
            df['mean'] = mean
            df['sd'] = sd
            df['CV_neighbors'] = 100 * (df['sd']/df['mean'])
            df = df.drop(columns = 'sd')
            df = df.drop(columns = 'mean')
            df['nb_neighbors'] = nb_neighbors
            
            nb_high_cv = []
            for k in range (nb_points) :
                nb_high_cv.append(len(df.iloc[neighbors[k]][df['CV_neighbors']>parameters['INPUT_CV_MAX']]))
            df['nb_high_cv'] = nb_high_cv
            
            df['Aberrant'] = np.where((df['nb_neighbors'] == df['nb_high_cv']), 1,0)
            
            df = df.drop(columns = 'CV_neighbors')
            df = df.drop(columns = 'nb_neighbors')
            df = df.drop(columns = 'nb_high_cv')
          
        #on va créer un dataframe avec les coordonnées, normalement les features sont parcourrues dans le même ordre
        
        coordinates = pd.DataFrame(coordinates_arr, columns = ['X','Y'])
        df['X']=coordinates['X']
        df['Y']=coordinates['Y']    
        
        if parameters['BOOLEAN'] :
            indexNames = df[df['Aberrant'] == 1 ].index
            df.drop(indexNames , inplace=True)
            df.drop(columns = 'Aberrant')
        
        #on transforme le dataframe en liste pour les attributs
        df_list=df.values.tolist()
                
                
        featureList=[]
        
        #on va parcourrir chaque ligne, ie chaque feature
        for row in df_list:
            feat = QgsFeature()
            feat.setAttributes(row[0:-2]) #row = une ligne, on exclu les deux dernières colonnes qui sont les coordonnées
            feat.setGeometry(QgsGeometry.fromPointXY(QgsPointXY(row[-2],row[-1]))) #on définit la position de chaque point 
            featureList.append(feat) #on ajoute la feature à la liste

        #on ajoute la liste des features à la couche de sortie
        sink.addFeatures(featureList)
        
        
        return{self.OUTPUT : dest_id} 

    def name(self):
        """
        Returns the algorithm name, used for identifying the algorithm. This
        string should be fixed for the algorithm, and must not be localised.
        The name should be unique within each provider. Names should contain
        lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'Filtrage spatial des donnees'

    def displayName(self):
        """
        Returns the translated algorithm name, which should be used for any
        user-visible display of the algorithm name.
        """
        return self.tr(self.name())

    def group(self):
        """
        Returns the name of the group this algorithm belongs to. This string
        should be localised.
        """
        return self.tr('Action sur Vecteurs')

    def shortHelpString(self):
        short_help = self.tr(
            'Permet de détecter les données aberrantes (outliers) pour un champ donné (une colonne) d’une '
            'couche vecteur à l’aide de plusieurs méthodes de filtrage. Les données aberrantes peuvent être '
            'soit supprimées, soit identifiées dans une nouvelle colonne dans la couche vecteur. '
            ' 3 sigmas : Sous l’hypothèse d’une distribution normale des données, la fonction identifie '
            'les données dans les intervalles (moyenne +/- 1 écart type ; moyenne +/- 2 écarts type ; '
            'moyenne +/- 3 écarts type ; '
            ' Interquartile : aussi connue sous le nom de la règle de Tukey. '
        ) 
        return short_help


    def groupId(self):
        """
        Returns the unique ID of the group this algorithm belongs to. This
        string should be fixed for the algorithm, and must not be localised.
        The group id should be unique within each provider. Group id should
        contain lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'action_sur_vecteur'

    def tr(self, string):
        return QCoreApplication.translate('Processing', string)

    def createInstance(self):
        return FiltreDonneesSpatiales()
