## -*- coding: utf-8 -*-

"""
/***************************************************************************
 AgriculturePrecision
                                 A QGIS plugin
 Chaines de traitement
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2020-07-21
        copyright            : (C) 2020 by ASPEXIT
        email                : cleroux@aspexit.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

__author__ = 'ASPEXIT'
"""
@author: Pierre-Yves Turquin - PERMAGRO
"""
__date__ = '2020-07-21'
__copyright__ = '(C) 2020 by ASPEXIT'

# This will get replaced with a git SHA1 when you do a git archive

__revision__ = '$Format:%H$'


from qgis.PyQt.QtCore import QCoreApplication
from qgis.core import (QgsProcessing,
                       QgsFeatureSink,
                       QgsProcessingAlgorithm,
                       QgsApplication,
                       QgsProcessingParameterFile,
                       QgsProcessingParameterFolderDestination
                       )



from qgis import processing 


class XmlToShp(QgsProcessingAlgorithm):
    """
    
    """ 

    OUTPUT= 'OUTPUT'
    INPUT = 'INPUT'

    def initAlgorithm(self, config):
        """
        Here we define the inputs and output of the algorithm, along
        with some other properties.
        """
        
        self.addParameter(
            QgsProcessingParameterFile(
                self.INPUT,
                self.tr('fichier XML à traiter')
            )
        )
        
        self.addParameter(
            QgsProcessingParameterFolderDestination(
                self.OUTPUT,
                self.tr('Dossier où enregistrer les shapefiles')
            )
        )
        
        

    def processAlgorithm(self, parameters, context, feedback):
        """
        Here is where the processing itself takes place.
        """
        # -*- coding: utf-8 -*-

        from xml.etree import ElementTree as ET
        import osgeo.ogr as ogr
        import osgeo.osr as osr
        import csv
        import os

        # /!\ Dans le fichier source supprimer xmlns="urn:x-telepac:fr.gouv.agriculture.telepac:echange-producteur" (balise producteur)

        # Fichier source
        fichierSource = self.parameterAsString(parameters,self.INPUT,context) #"input.xml"
        folderpath =  self.parameterAsString(parameters,self.OUTPUT,context) + '\\'

        #####################
        ##### Initialisation
        #####################

        #ici je suppose qu'on va définir l'environnement dans lequel on va travailler, et ou se situent les librairies ?
        #os.environ['GDAL_DATA'] = os.environ['CONDA_PREFIX'] + r'\Library\share\gdal'
        #os.environ['PROJ_LIB'] = os.environ['CONDA_PREFIX'] + r'\Library\share'

        #on récupère le fichier XML dans tree (sous forme d'un arbre de données), ainsi que la racine
        tree = ET.parse(fichierSource) #
        root = tree.getroot()
       

        #####################
        ##### Parser ########
        #####################
        '''
        Ilots
        '''
        compteurIlot = 0
        headerIlot = ['pacage','exploitant','numilot','codeinsee','geom']
        fichierDestinationParcelle = 'export_ilots.csv'

        with open(fichierDestinationParcelle, 'w', newline='', encoding='utf-8') as csv_file_ilot:    
            csv_writer_ilot = csv.writer(csv_file_ilot, delimiter=';', quotechar='"')
            csv_writer_ilot.writerow(headerIlot)

            for producteur in root.findall('producteur'):    
                numeroPacage = producteur.get('numero-pacage')
                
                # Exploitation unique
                exploitantUnique = producteur.find('demandeur/identification-societe')        
                
                if exploitantUnique is not None:
                    exploitant = producteur.find('demandeur/identification-societe/exploitation').text    
                    #siret = producteur.find('.//siret').text    
                    #courriel = producteur.find('.//courriel').text
                    
                # Exploitations multiples
                exploitantsMultiples = producteur.find('demandeur/identification-individuelle')
                    
                if exploitantsMultiples is not None:
                    civilite = producteur.find('demandeur/identification-individuelle/identite/civilite').text
                    nom = producteur.find('demandeur/identification-individuelle/identite/nom').text
                    prenoms = producteur.find('demandeur/identification-individuelle/identite/prenoms').text        
                    exploitant = (civilite + ' ' + nom + ' ' +prenoms)

                # Recherche des ilots
                for ilot in producteur.findall('rpg/ilot'):
                    compteurIlot +=1        
                    numeroIlot = ilot.get('numero-ilot')
                    codeInsee = ilot.find('commune').text
                    
                    # Geometrie
                    gmlIlot = ilot.findall('geometrie')[0]
                    xmlIlot = ET.tostring(gmlIlot, encoding='unicode', method='xml')
                    xmlIlot_replace01 = xmlIlot.replace("<geometrie xmlns:ns0=\"http://www.opengis.net/gml\">", "")
                    xmlIlot_replace02 = xmlIlot_replace01.replace("</geometrie>", "")
                    geomXmlIlot = ogr.CreateGeometryFromGML(xmlIlot_replace02)
                    
                    # Ecriture du CSV
                    rowIlot = [numeroPacage,exploitant,numeroIlot,codeInsee,geomXmlIlot]       
                    csv_writer_ilot.writerow(rowIlot)
                
        
        #####################
        ## Création du shp ##
        #####################
        fichierSource = 'export_ilots.csv'

        with open(fichierSource, 'r', encoding='utf-8') as csv_file:
            reader = csv.DictReader(csv_file, delimiter=';', quotechar='"')

            # set up the shapefile driver
            driver = ogr.GetDriverByName("ESRI Shapefile")

            # create the data source
            data_source = driver.CreateDataSource(folderpath + "export_ilots.shp")

            # create the spatial reference
            srs = osr.SpatialReference()
            srs.ImportFromEPSG(2154)

            # create the layer
            layer = data_source.CreateLayer("export_ilots", srs, ogr.wkbPolygon)

            # Add the fields we're interested in
            field_pacage = ogr.FieldDefn("pacage", ogr.OFTString)
            field_pacage.SetWidth(9)
            layer.CreateField(field_pacage)
            field_exploitant = ogr.FieldDefn("exploitant", ogr.OFTString)
            field_exploitant.SetWidth(50)
            layer.CreateField(field_exploitant)
            layer.CreateField(ogr.FieldDefn("ilot", ogr.OFTInteger))
            field_codeinsee = ogr.FieldDefn("codeinsee", ogr.OFTString)
            field_codeinsee.SetWidth(5)
            layer.CreateField(field_codeinsee)

            # Process the text file and add the attributes and features to the shapefile
            for row in reader:
                # create the feature
                feature = ogr.Feature(layer.GetLayerDefn())
                # Set the attributes using the values from the delimited text file
                feature.SetField("pacage", row['pacage'])
                feature.SetField("exploitant", row['exploitant'])
                feature.SetField("ilot", row['numilot'])
                feature.SetField("codeinsee", row['codeinsee'])
                #feature.SetField("geom", row['geom'])

                # create the WKT for the feature using Python string formatting
                wkt = (row['geom'])
                #wkt = "POLYGON(%f %f)" % (row['geom'])

                # Create the point from the Well Known Txt
                geomPolygon = ogr.CreateGeometryFromWkt(wkt)

                # Set the feature geometry using the point
                feature.SetGeometry(geomPolygon)
                # Create the feature in the layer (shapefile)
                layer.CreateFeature(feature)
                # Dereference the feature
                feature = None

            # Save and close the data source
            data_source = None
            
            
        #####################
        # Suppression du csv 
        #####################
        if os.path.exists("export_ilots.csv"):
            os.remove("export_ilots.csv")
    
        #####################
        ##### Parser ########
        #####################
        '''
        Parcelles
        '''
        compteurParcelle = 0
        compteurIlot = 0
        headerParcelle = ['pacage','exploitant','numilot','codeinsee','numparcelle','codeculture','geom']
        fichierDestinationParcelle = 'export_parcelles.csv'

        with open(fichierDestinationParcelle, 'w', newline='', encoding='utf-8') as csv_file_parcelle:    
            csv_writer_parcelle = csv.writer(csv_file_parcelle, delimiter=';', quotechar='"')
            csv_writer_parcelle.writerow(headerParcelle)

            for producteur in root.findall('producteur'):    
                numeroPacage = producteur.get('numero-pacage')
                
                # Exploitation unique
                exploitantUnique = producteur.find('demandeur/identification-societe')        
                
                if exploitantUnique is not None:
                    exploitant = producteur.find('demandeur/identification-societe/exploitation').text    
                    #siret = producteur.find('.//siret').text    
                    #courriel = producteur.find('.//courriel').text
                    
                # Exploitations multiples
                exploitantsMultiples = producteur.find('demandeur/identification-individuelle')
                    
                if exploitantsMultiples is not None:
                    civilite = producteur.find('demandeur/identification-individuelle/identite/civilite').text
                    nom = producteur.find('demandeur/identification-individuelle/identite/nom').text
                    prenoms = producteur.find('demandeur/identification-individuelle/identite/prenoms').text        
                    exploitant = (civilite + ' ' + nom + ' ' +prenoms)

                # Recherche des parcelles
                for ilot in producteur.findall('rpg/ilot'):
                    compteurIlot +=1        
                    numeroIlot = ilot.get('numero-ilot')
                    codeInsee = ilot.find('commune').text
                    
                    for parcelle in ilot.findall('parcelles/parcelle'):
                        compteurParcelle +=1
                        
                        for descriptifParcelle in parcelle.findall('descriptif-parcelle'):
                            numeroParcelle = descriptifParcelle.get('numero-parcelle')            
                        
                        culture = parcelle.find('./descriptif-parcelle//code-culture').text
                        
                        # Geometrie
                        gmlParcelle = parcelle.findall('geometrie')[0]
                        xmlParcelle = ET.tostring(gmlParcelle, encoding='unicode', method='xml')
                        xmlParcelle_replace01 = xmlParcelle.replace("<geometrie xmlns:ns0=\"http://www.opengis.net/gml\">", "")
                        xmlParcelle_replace02 = xmlParcelle_replace01.replace("</geometrie>", "")
                        geomXmlParcelle = ogr.CreateGeometryFromGML(xmlParcelle_replace02)                
                        
                        # Ecriture du CSV
                        rowParcelle = [numeroPacage,exploitant,numeroIlot,codeInsee,numeroParcelle,culture,geomXmlParcelle]
                        csv_writer_parcelle.writerow(rowParcelle)            
                        #print(numeroPacage, exploitant, numeroIlot, codeInsee, numeroParcelle, culture, geomXmlParcelle)
                
     
        ######################
        ### Création du shp ##
        ######################
        
        fichierSource = 'export_parcelles.csv'

        with open(fichierSource, 'r', encoding='utf-8') as csv_file:
            reader = csv.DictReader(csv_file, delimiter=';', quotechar='"')

            # set up the shapefile driver
            driver = ogr.GetDriverByName("ESRI Shapefile")

            # create the data source
            data_source = driver.CreateDataSource(folderpath + "export_parcelles.shp")

            # create the spatial reference
            srs = osr.SpatialReference()
            srs.ImportFromEPSG(2154)

            # create the layer
            layer = data_source.CreateLayer("export_parcelles", srs, ogr.wkbPolygon)
            
            headerParcelle = ['pacage','exploitant','numilot','codeinsee','numparcelle','codeculture','geom']

            # Add the fields we're interested in
            field_pacage = ogr.FieldDefn("pacage", ogr.OFTString)
            field_pacage.SetWidth(9)
            layer.CreateField(field_pacage)
            field_exploitant = ogr.FieldDefn("exploitant", ogr.OFTString)
            field_exploitant.SetWidth(50)
            layer.CreateField(field_exploitant)    
            layer.CreateField(ogr.FieldDefn("ilot", ogr.OFTInteger))    
            field_codeinsee = ogr.FieldDefn("codeinsee", ogr.OFTString)
            field_codeinsee.SetWidth(10)
            layer.CreateField(field_codeinsee)    
            layer.CreateField(ogr.FieldDefn("parcelle", ogr.OFTInteger))
            field_codeculture = ogr.FieldDefn("culture", ogr.OFTString)
            field_codeculture.SetWidth(5)
            layer.CreateField(field_codeculture)

            # Process the text file and add the attributes and features to the shapefile
            for row in reader:
                # create the feature
                feature = ogr.Feature(layer.GetLayerDefn())
                # Set the attributes using the values from the delimited text file
                feature.SetField("pacage", row['pacage'])
                feature.SetField("exploitant", row['exploitant'])
                feature.SetField("ilot", row['numilot'])
                feature.SetField("codeinsee", row['codeinsee'])
                feature.SetField("parcelle", row['numparcelle'])
                feature.SetField("culture", row['codeculture'])
                #feature.SetField("geom", row['geom'])

                # create the WKT for the feature using Python string formatting
                wkt = (row['geom'])
                #wkt = "POLYGON(%f %f)" % (row['geom'])

                # Create the point from the Well Known Txt
                geomPolygon = ogr.CreateGeometryFromWkt(wkt)

                # Set the feature geometry using the point
                feature.SetGeometry(geomPolygon)
                # Create the feature in the layer (shapefile)
                layer.CreateFeature(feature)
                # Dereference the feature
                feature = None

            # Save and close the data source
            data_source = None
            
           
        #####################
        # Suppression du csv 
        #####################
        if os.path.exists("export_parcelles.csv"):
            os.remove("export_parcelles.csv")
       
        #####################
        ##### Parser ########
        #####################
        '''
        SNA
        '''
        compteurSNAPolygon = 0
        compteurSNAPoint = 0
        compteurSNALigne = 0
        headerSNA = ['pacage','exploitant','categorie','type','geom']
        fichierDestinationSNAPolygon = 'export_sna_polygon.csv'
        fichierDestinationSNAPoint = 'export_sna_point.csv'
        fichierDestinationSNALigne = 'export_sna_ligne.csv'

        # Détection des types de geométries
        for producteur in root.findall('producteur'):    
            numeroPacage = producteur.get('numero-pacage')
            
            for snaDeclaree in producteur.findall('rpg/sna-declaree'):
                gmlSNA = snaDeclaree.findall('geometrie')[0]
                xmlSNA = ET.tostring(gmlSNA, encoding='unicode', method='xml')
                xmlSNA_replace01 = xmlSNA.replace("<geometrie xmlns:ns0=\"http://www.opengis.net/gml\">", "")
                xmlSNA_replace02 = xmlSNA_replace01.replace("</geometrie>", "")
                geomXmlSNA = ogr.CreateGeometryFromGML(xmlSNA_replace02)
                
                # Type de géométries
                detectionGeom = str(geomXmlSNA)
                if detectionGeom.startswith("POLYGON") == True :
                    #print('Polygon detecté')
                    compteurSNAPolygon += 1
                if detectionGeom.startswith("POINT") == True :
                    #print('Point detecté')
                    compteurSNAPoint += 1
                if detectionGeom.startswith("LINESTRING") == True :
                    #print('Ligne detecté')
                    compteurSNALigne += 1
        #
        sommeSNA = compteurSNAPolygon + compteurSNAPoint + compteurSNALigne
     
        #####################
        ##### Parser ########
        #####################
        #
        if compteurSNAPolygon != 0 :   
            with open(fichierDestinationSNAPolygon, 'w', newline='', encoding='utf-8') as csv_file_sna_polygon:    
                csv_writer_sna_polygon = csv.writer(csv_file_sna_polygon, delimiter=';', quotechar='"')
                csv_writer_sna_polygon.writerow(headerSNA)
            
                for producteur in root.findall('producteur'):    
                    numeroPacage = producteur.get('numero-pacage')
                    
                    # Exploitation unique
                    exploitantUnique = producteur.find('demandeur/identification-societe')        
                    
                    if exploitantUnique is not None:
                        exploitant = producteur.find('demandeur/identification-societe/exploitation').text    
                        #siret = producteur.find('.//siret').text    
                        #courriel = producteur.find('.//courriel').text
                        
                    # Exploitations multiples
                    exploitantsMultiples = producteur.find('demandeur/identification-individuelle')
                        
                    if exploitantsMultiples is not None:
                        civilite = producteur.find('demandeur/identification-individuelle/identite/civilite').text
                        nom = producteur.find('demandeur/identification-individuelle/identite/nom').text
                        prenoms = producteur.find('demandeur/identification-individuelle/identite/prenoms').text        
                        exploitant = (civilite + ' ' + nom + ' ' +prenoms)
                    
                    # Recherche des SNA
                    for snaDeclaree in producteur.findall('rpg/sna-declaree'):
                        #numeroSNA = snaDeclaree.find('numeroSna').text
                        categorieSNA = snaDeclaree.find('categorieSna').text
                        typeSNA = snaDeclaree.find('typeSna').text
                        #print(numeroSNA)
                        
                        # Geometrie SNA Polygon
                        gmlSNA = snaDeclaree.findall('geometrie')[0]
                        xmlSNA = ET.tostring(gmlSNA, encoding='unicode', method='xml')
                        xmlSNA_replace01 = xmlSNA.replace("<geometrie xmlns:ns0=\"http://www.opengis.net/gml\">", "")
                        xmlSNA_replace02 = xmlSNA_replace01.replace("</geometrie>", "")
                        geomXmlSNA = ogr.CreateGeometryFromGML(xmlSNA_replace02)
                        
                        # Ecriture du CSV
                        detectionGeom = str(geomXmlSNA)
                        if detectionGeom.startswith("POLYGON") == True :
                            #print('Polygon detecté')
                            rowSNA_polygon = [numeroPacage,exploitant,categorieSNA,typeSNA,geomXmlSNA]
                            csv_writer_sna_polygon.writerow(rowSNA_polygon)
        #####################
        ## Création du shp ##
        #####################
            fichierSource = 'export_sna_polygon.csv'

            with open(fichierSource, 'r', encoding='utf-8') as csv_file:
                reader = csv.DictReader(csv_file, delimiter=';', quotechar='"')

                # set up the shapefile driver
                driver = ogr.GetDriverByName("ESRI Shapefile")
            
                # create the data source
                data_source = driver.CreateDataSource(folderpath + "export_sna_polygon.shp")

                # create the spatial reference
                srs = osr.SpatialReference()
                srs.ImportFromEPSG(2154)

                # create the layer
                layer = data_source.CreateLayer("export_sna_polygon", srs, ogr.wkbPolygon)

                # Add the fields we're interested in
                field_pacage = ogr.FieldDefn("pacage", ogr.OFTString)
                field_pacage.SetWidth(9)
                layer.CreateField(field_pacage)
                field_exploitant = ogr.FieldDefn("exploitant", ogr.OFTString)
                field_exploitant.SetWidth(50)
                layer.CreateField(field_exploitant)
                field_categorie = ogr.FieldDefn("categorie", ogr.OFTString)
                field_categorie.SetWidth(50)
                layer.CreateField(field_categorie)
                field_type = ogr.FieldDefn("type", ogr.OFTString)
                field_type.SetWidth(50)
                layer.CreateField(field_type)
                # Process the text file and add the attributes and features to the shapefile
                for row in reader:
                    # create the feature
                    feature = ogr.Feature(layer.GetLayerDefn())
                    # Set the attributes using the values from the delimited text file
                    feature.SetField("pacage", row['pacage'])
                    feature.SetField("exploitant", row['exploitant'])
                    feature.SetField("categorie", row['categorie'])
                    feature.SetField("type", row['type'])
                    #feature.SetField("geom", row['geom'])

                    # create the WKT for the feature using Python string formatting
                    wkt = (row['geom'])
                    #wkt = "POLYGON(%f %f)" % (row['geom'])

                    # Create the point from the Well Known Txt
                    geomPolygon = ogr.CreateGeometryFromWkt(wkt)

                    # Set the feature geometry using the point
                    feature.SetGeometry(geomPolygon)
                    # Create the feature in the layer (shapefile)
                    layer.CreateFeature(feature)
                    # Dereference the feature
                    feature = None

                # Save and close the data source
                data_source = None
                   
             
        #####################
        # Suppression du csv 
        #####################
        if os.path.exists("export_sna_polygon.csv"):
            os.remove("export_sna_polygon.csv")
        #####################
        ##### Parser ########
        #####################
        #
        if compteurSNAPoint != 0 :
            with open(fichierDestinationSNAPoint, 'w', newline='', encoding='utf-8') as csv_file_sna_point:    
                csv_writer_sna_point = csv.writer(csv_file_sna_point, delimiter=';', quotechar='"')
                csv_writer_sna_point.writerow(headerSNA)
            
                for producteur in root.findall('producteur'):    
                    numeroPacage = producteur.get('numero-pacage')
                    
                    # Exploitation unique
                    exploitantUnique = producteur.find('demandeur/identification-societe')        
                    
                    if exploitantUnique is not None:
                        exploitant = producteur.find('demandeur/identification-societe/exploitation').text    
                        #siret = producteur.find('.//siret').text    
                        #courriel = producteur.find('.//courriel').text
                        
                    # Exploitations multiples
                    exploitantsMultiples = producteur.find('demandeur/identification-individuelle')
                        
                    if exploitantsMultiples is not None:
                        civilite = producteur.find('demandeur/identification-individuelle/identite/civilite').text
                        nom = producteur.find('demandeur/identification-individuelle/identite/nom').text
                        prenoms = producteur.find('demandeur/identification-individuelle/identite/prenoms').text        
                        exploitant = (civilite + ' ' + nom + ' ' +prenoms)
                    
                    # Recherche des SNA
                    for snaDeclaree in producteur.findall('rpg/sna-declaree'):
                        #numeroSNA = snaDeclaree.find('numeroSna').text
                        categorieSNA = snaDeclaree.find('categorieSna').text
                        typeSNA = snaDeclaree.find('typeSna').text
                        #print(numeroSNA)  
                        
                        # Geometrie SNA Point
                        gmlSNA = snaDeclaree.findall('geometrie')[0]
                        xmlSNA = ET.tostring(gmlSNA, encoding='unicode', method='xml')
                        xmlSNA_replace01 = xmlSNA.replace("<geometrie xmlns:ns0=\"http://www.opengis.net/gml\">", "")
                        xmlSNA_replace02 = xmlSNA_replace01.replace("</geometrie>", "")
                        geomXmlSNA = ogr.CreateGeometryFromGML(xmlSNA_replace02)
                        #
                        detectionGeom = str(geomXmlSNA)
                        if detectionGeom.startswith("POINT") == True :
                            #print('Point detecté')
                            rowSNA_point = [numeroPacage,exploitant,categorieSNA,typeSNA,geomXmlSNA]
                            csv_writer_sna_point.writerow(rowSNA_point)
        #####################
        ## Création du shp ##
        #####################    
            fichierSource = 'export_sna_point.csv'

            with open(fichierSource, 'r', encoding='utf-8') as csv_file:
                reader = csv.DictReader(csv_file, delimiter=';', quotechar='"')

                # set up the shapefile driver
                driver = ogr.GetDriverByName("ESRI Shapefile")
            
                # create the data source
                data_source = driver.CreateDataSource(folderpath + "export_sna_point.shp")

                # create the spatial reference
                srs = osr.SpatialReference()
                srs.ImportFromEPSG(2154)

                # create the layer
                layer = data_source.CreateLayer("export_sna_point", srs, ogr.wkbPoint)

                # Add the fields we're interested in
                field_pacage = ogr.FieldDefn("pacage", ogr.OFTString)
                field_pacage.SetWidth(9)
                layer.CreateField(field_pacage)
                field_exploitant = ogr.FieldDefn("exploitant", ogr.OFTString)
                field_exploitant.SetWidth(50)
                layer.CreateField(field_exploitant)
                field_categorie = ogr.FieldDefn("categorie", ogr.OFTString)
                field_categorie.SetWidth(50)
                layer.CreateField(field_categorie)
                field_type = ogr.FieldDefn("type", ogr.OFTString)
                field_type.SetWidth(50)
                layer.CreateField(field_type)
                # Process the text file and add the attributes and features to the shapefile
                for row in reader:
                    # create the feature
                    feature = ogr.Feature(layer.GetLayerDefn())
                    # Set the attributes using the values from the delimited text file
                    feature.SetField("pacage", row['pacage'])
                    feature.SetField("exploitant", row['exploitant'])
                    feature.SetField("categorie", row['categorie'])
                    feature.SetField("type", row['type'])
                    #feature.SetField("geom", row['geom'])

                    # create the WKT for the feature using Python string formatting
                    wkt = (row['geom'])
                    #wkt = "POLYGON(%f %f)" % (row['geom'])

                    # Create the point from the Well Known Txt
                    geomPoint = ogr.CreateGeometryFromWkt(wkt)

                    # Set the feature geometry using the point
                    feature.SetGeometry(geomPoint)
                    # Create the feature in the layer (shapefile)
                    layer.CreateFeature(feature)
                    # Dereference the feature
                    feature = None

                # Save and close the data source
                data_source = None
                   
              
        #####################
        # Suppression du csv 
        #####################
        if os.path.exists("export_sna_point.csv"):
            os.remove("export_sna_point.csv")
        #####################
        ##### Parser ########
        #####################
        #                
        if compteurSNALigne != 0 :
            with open(fichierDestinationSNALigne, 'w', newline='', encoding='utf-8') as csv_file_sna_ligne:    
                csv_writer_sna_ligne = csv.writer(csv_file_sna_ligne, delimiter=';', quotechar='"')
                csv_writer_sna_ligne.writerow(headerSNA)
            
                for producteur in root.findall('producteur'):    
                    numeroPacage = producteur.get('numero-pacage')
                    
                    # Exploitation unique
                    exploitantUnique = producteur.find('demandeur/identification-societe')        
                    
                    if exploitantUnique is not None:
                        exploitant = producteur.find('demandeur/identification-societe/exploitation').text    
                        #siret = producteur.find('.//siret').text    
                        #courriel = producteur.find('.//courriel').text
                        
                    # Exploitations multiples
                    exploitantsMultiples = producteur.find('demandeur/identification-individuelle')
                        
                    if exploitantsMultiples is not None:
                        civilite = producteur.find('demandeur/identification-individuelle/identite/civilite').text
                        nom = producteur.find('demandeur/identification-individuelle/identite/nom').text
                        prenoms = producteur.find('demandeur/identification-individuelle/identite/prenoms').text        
                        exploitant = (civilite + ' ' + nom + ' ' +prenoms)
                    
                    # Recherche des SNA
                    for snaDeclaree in producteur.findall('rpg/sna-declaree'):
                        #numeroSNA = snaDeclaree.find('numeroSna').text
                        categorieSNA = snaDeclaree.find('categorieSna').text
                        typeSNA = snaDeclaree.find('typeSna').text
                        #print(numeroSNA)            
                        
                        # Geometrie SNA Ligne
                        gmlSNA = snaDeclaree.findall('geometrie')[0]
                        xmlSNA = ET.tostring(gmlSNA, encoding='unicode', method='xml')
                        xmlSNA_replace01 = xmlSNA.replace("<geometrie xmlns:ns0=\"http://www.opengis.net/gml\">", "")
                        xmlSNA_replace02 = xmlSNA_replace01.replace("</geometrie>", "")
                        geomXmlSNA = ogr.CreateGeometryFromGML(xmlSNA_replace02)
                        #
                        detectionGeom = str(geomXmlSNA)
                        if detectionGeom.startswith("LINESTRING") == True :
                            #print('Ligne detectée')
                            rowSNA_ligne = [numeroPacage,exploitant,categorieSNA,typeSNA,geomXmlSNA]
                            csv_writer_sna_ligne.writerow(rowSNA_ligne)
        #####################
        ## Création du shp ##
        #####################    
            fichierSource = 'export_sna_ligne.csv'

            with open(fichierSource, 'r', encoding='utf-8') as csv_file:
                reader = csv.DictReader(csv_file, delimiter=';', quotechar='"')

                # set up the shapefile driver
                driver = ogr.GetDriverByName("ESRI Shapefile")
            
                # create the data source
                data_source = driver.CreateDataSource( folderpath + "export_sna_ligne.shp")

                # create the spatial reference
                srs = osr.SpatialReference()
                srs.ImportFromEPSG(2154)

                # create the layer
                layer = data_source.CreateLayer("export_sna_ligne", srs, ogr.wkbLineString)

                # Add the fields we're interested in
                field_pacage = ogr.FieldDefn("pacage", ogr.OFTString)
                field_pacage.SetWidth(9)
                layer.CreateField(field_pacage)
                field_exploitant = ogr.FieldDefn("exploitant", ogr.OFTString)
                field_exploitant.SetWidth(50)
                layer.CreateField(field_exploitant)
                field_categorie = ogr.FieldDefn("categorie", ogr.OFTString)
                field_categorie.SetWidth(50)
                layer.CreateField(field_categorie)
                field_type = ogr.FieldDefn("type", ogr.OFTString)
                field_type.SetWidth(50)
                layer.CreateField(field_type)
                # Process the text file and add the attributes and features to the shapefile
                for row in reader:
                    # create the feature
                    feature = ogr.Feature(layer.GetLayerDefn())
                    # Set the attributes using the values from the delimited text file
                    feature.SetField("pacage", row['pacage'])
                    feature.SetField("exploitant", row['exploitant'])
                    feature.SetField("categorie", row['categorie'])
                    feature.SetField("type", row['type'])
                    #feature.SetField("geom", row['geom'])

                    # create the WKT for the feature using Python string formatting
                    wkt = (row['geom'])
                    #wkt = "POLYGON(%f %f)" % (row['geom'])

                    # Create the point from the Well Known Txt
                    geomLigne = ogr.CreateGeometryFromWkt(wkt)

                    # Set the feature geometry using the point
                    feature.SetGeometry(geomLigne)
                    # Create the feature in the layer (shapefile)
                    layer.CreateFeature(feature)
                    # Dereference the feature
                    feature = None

                # Save and close the data source
                data_source = None
                   
           
        #####################
        # Suppression du csv 
        #####################
        if os.path.exists("export_sna_ligne.csv"):
            os.remove("export_sna_ligne.csv")
        #####################   
      
                
            
        return{self.OUTPUT : folderpath } 
   
    def name(self):
        """
        Returns the algorithm name, used for identifying the algorithm. This
        string should be fixed for the algorithm, and must not be localised.
        The name should be unique within each provider. Names should contain
        lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return "Convertir xml vers shp"

    def displayName(self):
        """
        Returns the translated algorithm name, which should be used for any
        user-visible display of the algorithm name.
        """
        return self.tr(self.name())

    def group(self):
        """
        Returns the name of the group this algorithm belongs to. This string
        should be localised.
        """
        return self.tr('Autre')
    
    def shortHelpString(self):
        short_help = self.tr(
            'Permet de convertir un fichier xml en plusieurs fichiers shapefiles'
        )
        return short_help

    def groupId(self):
        """
        Returns the unique ID of the group this algorithm belongs to. This
        string should be fixed for the algorithm, and must not be localised.
        The group id should be unique within each provider. Group id should
        contain lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'autre'

    def tr(self, string):
        return QCoreApplication.translate('Processing', string)

    def createInstance(self):
        return XmlToShp()
