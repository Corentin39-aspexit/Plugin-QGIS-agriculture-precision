## -*- coding: utf-8 -*-

"""
/***************************************************************************
 Precision Agriculture
                                 A QGIS plugin
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2020-07-21
        copyright            : (C) 2020 by ASPEXIT
        email                : cleroux@aspexit.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

__author__ = 'Lisa Rollier - ASPEXIT'
__date__ = '2020-07-21'
__copyright__ = '(C) 2020 by ASPEXIT'

# This will get replaced with a git SHA1 when you do a git archive

__revision__ = '$Format:%H$'


from qgis.PyQt.QtCore import QCoreApplication, QVariant
from qgis.core import (QgsProcessing,
                       QgsFeatureSink,
                       QgsProcessingAlgorithm,
                       QgsApplication,
                       QgsVectorLayer,
                       QgsProcessingParameterEnum,
                       QgsProcessingParameterNumber,
                       QgsProcessingParameterField,
                       QgsProcessingParameterVectorLayer,
                       QgsProcessingParameterRasterDestination)



from qgis import processing 
from .functions.general import *

class Tessellations(QgsProcessingAlgorithm):
    """
    
    """ 

    OUTPUT= 'OUTPUT'
    INPUT = 'INPUT'
    INPUT_METHOD = 'INPUT_METHOD'
    INPUT_PIXEL = 'INPUT_PIXEL'
    INPUT_POWER = 'INPUT_POWER'
    FIELD = 'FIELD'

    def initAlgorithm(self, config):
        """
        Here we define the inputs and output of the algorithm, along
        with some other properties.
        """
        
        self.addParameter(
            QgsProcessingParameterVectorLayer(
                self.INPUT,
                self.tr('Point layer'),
                [QgsProcessing.TypeVectorPoint]
            )
        )
        
        self.addParameter(
            QgsProcessingParameterEnum(
                self.INPUT_METHOD,
                self.tr('Tessellation type'),
                ['Thiessen','Voronoi','Delaunay']
            )
        )
                
        self.addParameter(
            QgsProcessingParameterRasterDestination(
                self.OUTPUT,
                self.tr('Tessellations')
            )
        )
        
        

    def processAlgorithm(self, parameters, context, feedback):
        """
        Here is where the processing itself takes place.
        """
        
        layer = self.parameterAsVectorLayer(parameters,self.INPUT,context)
        output_path = self.parameterAsOutputLayer(parameters,self.OUTPUT,context)
        method = self.parameterAsEnum(parameters,self.INPUT_METHOD,context)
        
                                     
        if feedback.isCanceled():
            return {}
                

        if method in [0,1] :
            if method == 0:
                # Thiessen polygons
                alg_params = {
                    'FRAME': 10,
                    'POINTS': parameters[self.INPUT],
                    'POLYGONS': QgsProcessing.TEMPORARY_OUTPUT
                }
                polygon_layer = processing.run('saga:thiessenpolygons', alg_params, context=context, feedback=feedback, is_child_algorithm=True)['POLYGONS']
            
            elif method == 1:
                  # Polygones de Voronoï
                alg_params = {
                    'BUFFER': 0,
                    'INPUT': parameters[self.INPUT],
                    'OUTPUT': QgsProcessing.TEMPORARY_OUTPUT
                }
                polygon_layer = processing.run('qgis:voronoipolygons', alg_params, context=context, feedback=feedback, is_child_algorithm=True)['OUTPUT']
              
                                                 
            if feedback.isCanceled():
                return {}
                    

            # Réaliser une enveloppe convexe à partir de points
            alg_params = {
                'INPUT': parameters[self.INPUT],
                'OUTPUT': QgsProcessing.TEMPORARY_OUTPUT
            }
            enveloppe_convexe = processing.run('Precision Agriculture:V - Convex Hull creation', alg_params, context=context, feedback=feedback, is_child_algorithm=True)
                                                 
            if feedback.isCanceled():
                return {}
                    

            # Couper
            alg_params = {
                'INPUT': polygon_layer,
                'OVERLAY': enveloppe_convexe['OUTPUT'],
                'OUTPUT': parameters['OUTPUT']
            }
            processing.run('native:clip', alg_params, context=context, feedback=feedback, is_child_algorithm=True)
        
        if method == 2 :
            
            # Triangulation de Delaunay
            alg_params = {
                'INPUT': parameters[self.INPUT],
                'OUTPUT': QgsProcessing.TEMPORARY_OUTPUT
            }
            triangulated_layer = processing.run('qgis:delaunaytriangulation', alg_params, context=context, feedback=feedback, is_child_algorithm=True)
                                                 
            if feedback.isCanceled():
                return {}
                    

            # Joindre les attributs par localisation
            alg_params = {
                'DISCARD_NONMATCHING': False,
                'INPUT': triangulated_layer['OUTPUT'],
                'JOIN': parameters[self.INPUT],
                'JOIN_FIELDS': None,
                'METHOD': 1,
                'PREDICATE': [0],
                'PREFIX': '',
                'OUTPUT': parameters['OUTPUT']
            }
            processing.run('qgis:joinattributesbylocation', alg_params, context=context, feedback=feedback, is_child_algorithm=True)
                                                         
        if feedback.isCanceled():
            return {}
                

            
        return{self.OUTPUT : output_path} 
   
    def name(self):
        """
        Returns the algorithm name, used for identifying the algorithm. This
        string should be fixed for the algorithm, and must not be localised.
        The name should be unique within each provider. Names should contain
        lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return "V - Tessellations"

    def displayName(self):
        """
        Returns the translated algorithm name, which should be used for any
        user-visible display of the algorithm name.
        """
        return self.tr(self.name())

    def group(self):
        """
        Returns the name of the group this algorithm belongs to. This string
        should be localised.
        """
        return self.tr('Data Manipulation')
        
    def shortHelpString(self):
        short_help = self.tr(
            'Allows to build tessellations from point vector data.'
            '\nprovided by ASPEXIT\n'
            'author : Lisa Rollier'   
        )
        return short_help

    def groupId(self):
        """
        Returns the unique ID of the group this algorithm belongs to. This
        string should be fixed for the algorithm, and must not be localised.
        The group id should be unique within each provider. Group id should
        contain lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'data_manipulation'

    def tr(self, string):
        return QCoreApplication.translate('Processing', string)

    def createInstance(self):
        return Tessellations()
