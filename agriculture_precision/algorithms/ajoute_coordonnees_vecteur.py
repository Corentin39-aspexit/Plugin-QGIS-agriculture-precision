# -*- coding: utf-8 -*-

"""
/***************************************************************************
 CentroideLisa
                                 A QGIS plugin
 test plugin centroide
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2020-07-07
        copyright            : (C) 2020 by Lisa R
        email                : dolisaob@gmail.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

__author__ = 'Lisa R'
__date__ = '2020-07-07'
__copyright__ = '(C) 2020 by Lisa R'

# This will get replaced with a git SHA1 when you do a git archive

__revision__ = '$Format:%H$'

#import QColor

from qgis.PyQt.QtCore import QCoreApplication, QVariant
from qgis.core import (QgsProcessing,
                       QgsFeatureSink,
                       QgsProcessingAlgorithm,
                       QgsApplication,
                       QgsVectorLayer,
                       QgsDataProvider,
                       QgsVectorDataProvider,
                       QgsField,
                       QgsWkbTypes,
                       QgsProcessingParameterVectorLayer,
                       QgsProcessingParameterVectorDestination)

from qgis import processing 

from osgeo import gdal
import numpy as np
from PyQt5.QtGui import QColor

class AjouteCoordonnees(QgsProcessingAlgorithm):
    """
    
    """

    # Constants used to refer to parameters and outputs. They will be
    # used when calling the algorithm from another algorithm, or when
    # calling from the QGIS console.
    
    

    OUTPUT= 'OUTPUT'
    INPUT = 'INPUT'

    def initAlgorithm(self, config):
        """
        Here we define the inputs and output of the algorithm, along
        with some other properties.
        """
        # We add the input vector features source. It can have any kind of
        # geometry.
       
        
        self.addParameter(
            QgsProcessingParameterVectorLayer(
                self.INPUT,
                self.tr('Input layer')
            )
        )
        
        self.addParameter(
            QgsProcessingParameterVectorDestination(
                self.OUTPUT,
                self.tr('Output layer')
            )
        )

    def processAlgorithm(self, parameters, context, feedback):
        """
        Here is where the processing itself takes place.
        """
        
        layer=self.parameterAsVectorLayer(parameters,self.INPUT,context) 
        fn = self.parameterAsOutputLayer(parameters,self.OUTPUT,context)
        
        #fn = "C:/Users/Utilisateur/Documents/ASPEXIT/Vecteur/data_set"
        #layer = iface.addVectorLayer(fn, '', 'ogr')
        
        #permet de faire un duplicat de la couche, et de l'enregistrer dans l'output du plugin
        layer.selectAll()
        layer_clone = processing.run("native:saveselectedfeatures", {'INPUT': layer, 'OUTPUT': fn})['OUTPUT']
        #on recupère la couche vecteur à partir du path en output de la fonction précédente : avec le code suivant on  est
        #obligé de modifier une couche déjà existante.
        
        layer_clone = QgsVectorLayer(fn,'','ogr')
      
        #on ajoute les nouveaux champs/fields
       
        caps = layer_clone.dataProvider().capabilities()
            
        if caps & QgsVectorDataProvider.AddAttributes :
            layer_clone.startEditing()
            res = layer_clone.dataProvider().addAttributes([QgsField('X',QVariant.Double), QgsField('Y',QVariant.Double)])
            layer_clone.updateFields()
        
        #on met a jour la couche ici pour pouvoir rajouter les elements
        layer_clone.updateExtents()
        
        features = layer_clone.getFeatures()

        #on parcour tous les attributs/fields et on modifie le champ X et le champ Y
        for feat in features:
            geom = feat.geometry()
            geomSingleType = QgsWkbTypes.isSingleType(geom.wkbType())
            if geom.type() == QgsWkbTypes.PointGeometry:
                if geomSingleType: 
                    fid = int(feat.id())
                    X=layer_clone.dataProvider().fieldNameIndex('X')
                    Y=layer_clone.dataProvider().fieldNameIndex('Y')
                    xy = geom.asPoint()
                    layer_clone.startEditing()
                    layer_clone.changeAttributeValue(fid, X, xy[0])
                    layer_clone.changeAttributeValue(fid, Y, xy[1])
                    layer_clone.commitChanges()
                    
        
        
        return{self.OUTPUT : fn} #donc c'est bien l'adresse ou se trouve l'objet qu'on veut mettre en sortie qu'on doit mettre
      

    def name(self):
        """
        Returns the algorithm name, used for identifying the algorithm. This
        string should be fixed for the algorithm, and must not be localised.
        The name should be unique within each provider. Names should contain
        lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'Ajouter les coordonnees dans un vecteur'

    def displayName(self):
        """
        Returns the translated algorithm name, which should be used for any
        user-visible display of the algorithm name.
        """
        return self.tr(self.name())

    def group(self):
        """
        Returns the name of the group this algorithm belongs to. This string
        should be localised.
        """
        return self.tr('Action sur Vecteurs')

    def groupId(self):
        """
        Returns the unique ID of the group this algorithm belongs to. This
        string should be fixed for the algorithm, and must not be localised.
        The group id should be unique within each provider. Group id should
        contain lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'action_sur_vecteur'

    def tr(self, string):
        return QCoreApplication.translate('Processing', string)

    def createInstance(self):
        return AjouteCoordonnees()
