## -*- coding: utf-8 -*-

"""
/***************************************************************************
 AgriculturePrecision
                                 A QGIS plugin
 Chaines de traitement
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2020-07-21
        copyright            : (C) 2020 by ASPEXIT
        email                : cleroux@aspexit.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

__author__ = 'ASPEXIT'
__date__ = '2020-07-21'
__copyright__ = '(C) 2020 by ASPEXIT'

# This will get replaced with a git SHA1 when you do a git archive

__revision__ = '$Format:%H$'


from qgis.PyQt.QtCore import QCoreApplication
from qgis.core import (QgsProcessing,
                       QgsFeatureSink,
                       QgsProcessingAlgorithm,
                       QgsApplication,
                       QgsVectorLayer,
                       QgsRasterLayer,
                       QgsProcessingParameterEnum,
                       QgsProcessingParameterNumber,
                       QgsProcessingParameterBoolean,
                       QgsProcessingParameterVectorLayer,
                       QgsProcessingParameterFolderDestination,
                       QgsProcessingParameterRasterLayer,
                       QgsProcessingParameterVectorDestination
                       )



from qgis import processing 
from math import sqrt
import os
import tempfile



class ZonageClassification(QgsProcessingAlgorithm):
    """
    
    """ 

    OUTPUT= 'OUTPUT'
    INPUT = 'INPUT'
    INPUT_CONTOUR = 'INPUT_CONTOUR'
    INPUT_METHOD = 'INPUT_METHOD'
    INPUT_N_CLASS = 'INPUT_N_CLASS'
    TEMP_PATH = 'TEMP_PATH'
    INPUT_RNEIGHBORS_SIZE = 'INPUT_RNEIGHBORS_SIZE'
    INPUT_MIN_AREA = 'INPUT_MIN_AREA'
    INPUT_METHOD_GENERALIZE = 'INPUT_METHOD_GENERALIZE'
    INPUT_ALPHA = 'INPUT_ALPHA'
    INPUT_BETA ='INPUT_BETA'
    INPUT_MAX_TOLERANCE ='INPUT_MAX_TOLERANCE'
    INPUT_LOOK_AHEAD = 'INPUT_LOOK_AHEAD'
    INPUT_REDUCTION = 'INPUT_REDUCTION'


    def initAlgorithm(self, config):
        """
        Here we define the inputs and output of the algorithm, along
        with some other properties.
        """
        
        self.addParameter(
            QgsProcessingParameterVectorLayer(
                self.INPUT_CONTOUR,
                self.tr('Field contour')
            )
        )
        
        self.addParameter(
            QgsProcessingParameterRasterLayer(
                self.INPUT,
                self.tr('Raster to zone')
            )
        )
       
        
        self.addParameter(
            QgsProcessingParameterEnum(
                self.INPUT_METHOD,
                self.tr('Classification method'),
                ['Quantiles', ' Equal-intervals', 'K-means']                
            )
        )
       
        self.addParameter(
            QgsProcessingParameterNumber(
                self.INPUT_N_CLASS, 
                self.tr('Number of classes'),
                QgsProcessingParameterNumber.Integer,
                4,
                False,
                2,
                10
            )
        )
        
        self.addParameter(
            QgsProcessingParameterNumber(
                self.INPUT_RNEIGHBORS_SIZE, 
                self.tr('Size of modal filter'),
                QgsProcessingParameterNumber.Double,
                3
            )
        )
        
        self.addParameter(
            QgsProcessingParameterNumber(
                self.INPUT_MIN_AREA, 
                self.tr('Minimum areas of zones'),
                QgsProcessingParameterNumber.Double,
                250
            )
        )
        
        self.addParameter(
            QgsProcessingParameterEnum(
                self.INPUT_METHOD_GENERALIZE,
                self.tr('Smoothing method'),
                ['Douglas', 'Douglas Reduction', 'Snakes'] #0,1,10             
            )
        )
        
        self.addParameter(
            QgsProcessingParameterNumber(
                self.INPUT_ALPHA, 
                self.tr('alpha (for Snakes method)'),
                QgsProcessingParameterNumber.Double,
                1
            )
        )
        
        self.addParameter(
            QgsProcessingParameterNumber(
                self.INPUT_BETA, 
                self.tr('beta (for Snakes method)'),
                QgsProcessingParameterNumber.Double,
                1
            )
        )
        
        self.addParameter(
            QgsProcessingParameterNumber(
                self.INPUT_MAX_TOLERANCE, 
                self.tr('Maximum tolerance value'),
                QgsProcessingParameterNumber.Double,
                1
            )
        )
        
        self.addParameter(
            QgsProcessingParameterNumber(
                self.INPUT_LOOK_AHEAD, 
                self.tr('Look ahead parameter'),
                QgsProcessingParameterNumber.Double,
                7
            )
        )
        
        self.addParameter(
            QgsProcessingParameterNumber(
                self.INPUT_REDUCTION, 
                self.tr('Reduction (for Douglas reduction method)'),
                QgsProcessingParameterNumber.Double,
                50
            )
        )
        
        self.addParameter(
            QgsProcessingParameterVectorDestination(
                self.OUTPUT,
                self.tr('Within-field zones')
            )
        )
        
        

    def processAlgorithm(self, parameters, context, feedback):
        """
        Here is where the processing itself takes place.
        """
        
        contour = self.parameterAsVectorLayer(parameters,self.INPUT_CONTOUR,context)
        layer = self.parameterAsRasterLayer(parameters,self.INPUT,context)
        output_path = self.parameterAsOutputLayer(parameters,self.OUTPUT,context)
        # création d'un dossier temporaire pour les fonctions GRASS
        tempfolder = tempfile.mkdtemp() + '/'
        #tempfolder2 = 'C:/Users/Utilisateur/Documents/ASPEXIT/plugin_agriculture_precision/data_test/Temporaires'
        nombre_classes = self.parameterAsInt(parameters,self.INPUT_N_CLASS,context)
        method = self.parameterAsEnum(parameters,self.INPUT_METHOD,context)
        method_generalize = self.parameterAsEnum(parameters,self.INPUT_METHOD_GENERALIZE,context)
        if method_generalize == 2 :
            method_generalize+=8
        
        # Tampon
        alg_params = {
            'DISSOLVE': False,
            'DISTANCE': 10,
            'END_CAP_STYLE': 0,
            'INPUT': parameters['INPUT_CONTOUR'],
            'JOIN_STYLE': 0,
            'MITER_LIMIT': 2,
            'SEGMENTS': 5,
            'OUTPUT': QgsProcessing.TEMPORARY_OUTPUT
        }
        tampon = processing.run('native:buffer', alg_params, context=context, feedback=feedback, is_child_algorithm=True)


        # Découper un raster selon une couche de masque
        alg_params = {
            'ALPHA_BAND': False,
            'CROP_TO_CUTLINE': True,
            'DATA_TYPE': 0,
            'EXTRA': '',
            'INPUT': parameters['INPUT'],
            'KEEP_RESOLUTION': False,
            'MASK': tampon['OUTPUT'],
            'MULTITHREADING': False,
            'NODATA': None,
            'OPTIONS': '',
            'SET_RESOLUTION': False,
            'SOURCE_CRS': 'ProjectCrs',
            'TARGET_CRS': 'ProjectCrs',
            'X_RESOLUTION': None,
            'Y_RESOLUTION': None,
            'OUTPUT':QgsProcessing.TEMPORARY_OUTPUT
        }
        coupe = processing.run('gdal:cliprasterbymasklayer', alg_params, context=context, feedback=feedback, is_child_algorithm=True)

        
        # Classification raster
        alg_params = {
            'INPUT': coupe['OUTPUT'],
            'INPUT_METHOD': method,
            'INPUT_N_CLASS': nombre_classes,
            'OUTPUT': QgsProcessing.TEMPORARY_OUTPUT
        }
        classe = processing.run('Precision Agriculture:R - Classification', alg_params, context=context, feedback=feedback, is_child_algorithm=True)

        
        # r.neighbors
        alg_params = {
            '-a': False,
            '-c': False,
            'GRASS_RASTER_FORMAT_META': '',
            'GRASS_RASTER_FORMAT_OPT': '',
            'GRASS_REGION_CELLSIZE_PARAMETER': 0,
            'GRASS_REGION_PARAMETER': None,
            'gauss': None,
            'input': classe['OUTPUT'],
            'method': 2,
            'quantile': '',
            'selection': classe['OUTPUT'],
            'size': parameters['INPUT_RNEIGHBORS_SIZE'],
            'weight': '',
            'output': tempfolder+'temporary.tif'
        }
        
        processing.run('grass7:r.neighbors', alg_params, context=context, feedback=feedback, is_child_algorithm=True)

        
        # Polygoniser (raster vers vecteur)
        alg_params = {
            'BAND': 1,
            'EIGHT_CONNECTEDNESS': False,
            'EXTRA': '',
            'FIELD': 'DN',
            'INPUT': tempfolder+'temporary.tif',#temp_path+'.tif', #voisins['output'],
            'OUTPUT': QgsProcessing.TEMPORARY_OUTPUT
        }
        polygones = processing.run('gdal:polygonize', alg_params, context=context, feedback=feedback, is_child_algorithm=True)

        # Réparer les géométries
        alg_params = {
            'INPUT': polygones['OUTPUT'],
            'OUTPUT': QgsProcessing.TEMPORARY_OUTPUT
        }
        repare = processing.run('native:fixgeometries', alg_params, context=context, feedback=feedback, is_child_algorithm=True)

        # Intersection
        alg_params = {
            'INPUT': parameters['INPUT_CONTOUR'],
            'INPUT_FIELDS': None,
            'OVERLAY': repare['OUTPUT'],
            'OVERLAY_FIELDS': None,
            'OVERLAY_FIELDS_PREFIX': '',
            'OUTPUT': QgsProcessing.TEMPORARY_OUTPUT
        }
        intersection = processing.run('native:intersection', alg_params, context=context, feedback=feedback, is_child_algorithm=True)

        # Supprimer champ(s)
        alg_params = {
            'COLUMN': 'fid',
            'INPUT': intersection['OUTPUT'],
            'OUTPUT': QgsProcessing.TEMPORARY_OUTPUT
        }
        champ_suppr = processing.run('qgis:deletecolumn', alg_params, context=context, feedback=feedback, is_child_algorithm=True)

        # v.clean
        alg_params = {
            '-b': False,
            '-c': False,
            'GRASS_MIN_AREA_PARAMETER': 0.0001,
            'GRASS_OUTPUT_TYPE_PARAMETER': 0,
            'GRASS_REGION_PARAMETER': None,
            'GRASS_SNAP_TOLERANCE_PARAMETER': -1,
            'GRASS_VECTOR_DSCO': '',
            'GRASS_VECTOR_EXPORT_NOCAT': False,
            'GRASS_VECTOR_LCO': '',
            'input': champ_suppr['OUTPUT'],
            'threshold': str(parameters['INPUT_MIN_AREA']),
            'tool': [10],
            'type': [0,1,2,3,4,5,6],
            'error': QgsProcessing.TEMPORARY_OUTPUT,
            'output': tempfolder+'temporary.shp'
        }
        processing.run('grass7:v.clean', alg_params, context=context, feedback=feedback, is_child_algorithm=True)

        # Supprimer champ(s)
        alg_params = {
            'COLUMN': 'fid',
            'INPUT': tempfolder+'temporary.shp',#clean['output'],
            'OUTPUT': QgsProcessing.TEMPORARY_OUTPUT
        }
        champ_suppr = processing.run('qgis:deletecolumn', alg_params, context=context, feedback=feedback, is_child_algorithm=True)


        # Statistiques de zone
        alg_params = {
            'COLUMN_PREFIX': '_',
            'INPUT_RASTER': parameters['INPUT'],
            'INPUT_VECTOR': champ_suppr['OUTPUT'],
            'RASTER_BAND': 1,
            'STATS': [2,4]
        }
        stat = processing.run('qgis:zonalstatistics', alg_params, context=context, feedback=feedback, is_child_algorithm=True)

        # v.generalize
        alg_params = {
            '-l': True,
            '-t': False,
            'GRASS_MIN_AREA_PARAMETER': 0.0001,
            'GRASS_OUTPUT_TYPE_PARAMETER': 0,
            'GRASS_REGION_PARAMETER': None,
            'GRASS_SNAP_TOLERANCE_PARAMETER': -1,
            'GRASS_VECTOR_DSCO': '',
            'GRASS_VECTOR_EXPORT_NOCAT': False,
            'GRASS_VECTOR_LCO': '',
            'alpha': parameters['INPUT_ALPHA'],
            'angle_thresh': 3,
            'beta': parameters['INPUT_BETA'],
            'betweeness_thresh': 0,
            'cats': '',
            'closeness_thresh': 0,
            'degree_thresh': 0,
            'input': stat['INPUT_VECTOR'],
            'iterations': 1,
            'look_ahead': parameters['INPUT_LOOK_AHEAD'],
            'method': method_generalize,
            'reduction': parameters['INPUT_REDUCTION'],
            'slide': 0.5,
            'threshold': parameters['INPUT_MAX_TOLERANCE'],
            'type': [0,1,2],
            'where': '',
            'error': QgsProcessing.TEMPORARY_OUTPUT,
            'output': parameters['OUTPUT']
        }
        generalise = processing.run('grass7:v.generalize', alg_params, context=context, feedback=feedback, is_child_algorithm=True)
        
        
        return{self.OUTPUT : output_path} 
   
    def name(self):
        """
        Returns the algorithm name, used for identifying the algorithm. This
        string should be fixed for the algorithm, and must not be localised.
        The name should be unique within each provider. Names should contain
        lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return "R - Classification-based zoning"

    def displayName(self):
        """
        Returns the translated algorithm name, which should be used for any
        user-visible display of the algorithm name.
        """
        return self.tr(self.name())

    def group(self):
        """
        Returns the name of the group this algorithm belongs to. This string
        should be localised.
        """
        return self.tr('Classification - Zoning')

    def groupId(self):
        """
        Returns the unique ID of the group this algorithm belongs to. This
        string should be fixed for the algorithm, and must not be localised.
        The group id should be unique within each provider. Group id should
        contain lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'classification_zoning'
        
    def shortHelpString(self):
        short_help = self.tr(
            'Allows to delimit within-field zones on a raster. The raster '
            'is first reclassified using a user-defined number of classes '
            'and classification method. The classified raster is then post-'
            'processed to build zones with the following steps: \n\n'
            ' - Modal smoothing of the classes to limit the initial data '
            'noise [call GRASS r.neigbours function].\n'
            ' - Vectorization of the raster to construct the zones [call '
            'QGIS polygonize function]\n'
            'Deletion of surface areas below a given threshold [call GRASS '
            'v.clean function].\n'
            ' - Calculation of statistics in each of the delimited zones '
            '(mean and standard deviation of the raster in each zone) '
            '[call QGIS Zone Statistics function].\n'
            ' - Smoothing of the contour of the zones to improve the '
            'rendering [calling GRASS v.generalize function] \n\n'
            'Each of these steps can be set by the user. This method '
            'is considered more like a spatialized classification method '
            'than a zoning method because it is based primarily on a '
            'classification method whose outputs are post-processed by '
            'spatial filters.'
        )
        return short_help

    def tr(self, string):
        return QCoreApplication.translate('Processing', string)

    def createInstance(self):
        return ZonageClassification()
