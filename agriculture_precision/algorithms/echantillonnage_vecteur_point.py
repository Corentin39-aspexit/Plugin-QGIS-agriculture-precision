# -*- coding: utf-8 -*-

"""
/***************************************************************************
 AgriculturePrecision
                                 A QGIS plugin
 Chaines de traitement
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2020-07-21
        copyright            : (C) 2020 by ASPEXIT
        email                : cleroux@aspexit.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

__author__ = 'ASPEXIT'
__date__ = '2020-07-21'
__copyright__ = '(C) 2020 by ASPEXIT'

# This will get replaced with a git SHA1 when you do a git archive

__revision__ = '$Format:%H$'



from qgis.PyQt.QtCore import QCoreApplication, QVariant
from qgis.core import (QgsProcessing,
                       QgsFeatureSink,
                       QgsProcessingAlgorithm,
                       QgsApplication,
                       QgsRasterLayer,
                       QgsProcessingParameterNumber,
                       QgsProcessingParameterVectorLayer,
                       QgsProcessingParameterVectorDestination,
                       QgsProcessingParameterEnum,
                       QgsProcessingParameterField,
                       QgsField,
                       QgsFeature,
                       QgsPointXY,
                       QgsGeometry,
                       QgsProcessingUtils)

from .functions.fonctions_repartition import *

from qgis import processing 
import numpy as np
import pandas as pd

class EchantillonageVecteurPoint(QgsProcessingAlgorithm):
    """
    
    """
    
    OUTPUT= 'OUTPUT'
    INPUT = 'INPUT'
    INPUT_METHOD_ECH = 'INPUT_METHOD_ECH'
    INPUT_METHOD_CLASS = 'INPUT_METHOD_CLASS'
    INPUT_N_CLASS='INPUT_N_CLASS'
    INPUT_ECHANTILLON = 'INPUT_ECHANTILLON'
    FIELD = 'FIELD'

    def initAlgorithm(self, config):
        """
        Here we define the inputs and output of the algorithm, along
        with some other properties.
        """
        
        self.addParameter(
            QgsProcessingParameterVectorLayer(
                self.INPUT,
                self.tr('Vector layer to sample'),
                [QgsProcessing.TypeVectorPoint]
            )
        )

       
        self.addParameter(
            QgsProcessingParameterEnum(
                self.INPUT_METHOD_ECH,
                self.tr("Sampling method"),
                ['Random sampling', 'Stratified sampling']               
            )
        )
        
        
        self.addParameter(
            QgsProcessingParameterEnum(
                self.INPUT_METHOD_CLASS,
                self.tr('Classification method (for stratified sampling)'),
                ['Quantiles', 'Equal intervals']                
            )
        )
        
        self.addParameter(
            QgsProcessingParameterNumber(
                self.INPUT_N_CLASS, 
                self.tr('Number of classes'),
                QgsProcessingParameterNumber.Integer,
                4,
                False,
                2,
                10
            )
        )
        
        self.addParameter( 
            QgsProcessingParameterField( 
                self.FIELD, 
                self.tr( "Field to classify" ), 
                QVariant(),
                self.INPUT,
                type=QgsProcessingParameterField.Numeric
            ) 
        )
    
        
        self.addParameter(
            QgsProcessingParameterNumber(
                self.INPUT_ECHANTILLON, 
                self.tr("Number of samples"),
                QgsProcessingParameterNumber.Integer,
                10,
                False,
                2,
                100
            )
        )
        
        self.addParameter(
            QgsProcessingParameterVectorDestination(
                self.OUTPUT,
                self.tr('Sampling points')
            )
        )
        
        

    def processAlgorithm(self, parameters, context, feedback):
        """
        Here is where the processing itself takes place.
        """
        
        layer=self.parameterAsVectorLayer(parameters,self.INPUT,context) 
        
        
        fn = self.parameterAsOutputLayer(parameters,self.OUTPUT,context)
        method = self.parameterAsEnum(parameters,self.INPUT_METHOD_ECH,context)
        
        if method == 0 : 
          
            # Sélection aléatoire
            alg_params = {
                'INPUT': parameters['INPUT'],
                'METHOD': 0,
                'NUMBER': parameters[self.INPUT_ECHANTILLON]
            }
            selection_aleatoire = processing.run('qgis:randomselection', alg_params, context=context, feedback=feedback, is_child_algorithm=True)

            # Extraire les entités sélectionnées
            alg_params = {
                'INPUT': selection_aleatoire['OUTPUT'],
                'OUTPUT': QgsProcessing.TEMPORARY_OUTPUT
            }
            extraction_selection = processing.run('native:saveselectedfeatures', alg_params, context=context, feedback=feedback, is_child_algorithm=True)

        else :
                
            # Classification vecteur
            alg_params = {
                'FIELD': parameters['FIELD'],
                'INPUT': parameters['INPUT'],
                'INPUT_METHOD_CLASS': parameters['INPUT_METHOD_CLASS'],
                'INPUT_N_CLASS': parameters['INPUT_N_CLASS'],
                'OUTPUT': QgsProcessing.TEMPORARY_OUTPUT
            }
            layer_class = processing.run('Precision Agriculture:V - Classification', alg_params, context=context, feedback=feedback, is_child_algorithm=True)
         
                
            
            # Sélection aléatoire parmi des sous-ensembles
            alg_params = {
                'FIELD': 'Classes',
                'INPUT': layer_class['OUTPUT'],
                'METHOD': 0,
                'NUMBER': parameters['INPUT_ECHANTILLON']
            }
            selection_aleatoire = processing.run('qgis:randomselectionwithinsubsets', alg_params, context=context, feedback=feedback, is_child_algorithm=True)

            # Extraire les entités sélectionnées
            alg_params = {
                'INPUT': selection_aleatoire['OUTPUT'],
                'OUTPUT': QgsProcessing.TEMPORARY_OUTPUT
            }
            extraction_selection = processing.run('native:saveselectedfeatures', alg_params, context=context, feedback=feedback, is_child_algorithm=True)

        # Ajouter les coordonnees dans un vecteur
        alg_params = {
            'CRS': 'ProjectCrs',
            'INPUT': extraction_selection['OUTPUT'],
            'PREFIX': '',
            'OUTPUT': parameters[self.OUTPUT]
        }
        ajout_xy = processing.run('native:addxyfields', alg_params, context=context, feedback=feedback, is_child_algorithm=True)
        
                   
        return{self.OUTPUT : fn} 

   
    def name(self):
        """
        Returns the algorithm name, used for identifying the algorithm. This
        string should be fixed for the algorithm, and must not be localised.
        The name should be unique within each provider. Names should contain
        lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return "V - Sampling over a vector"

    def displayName(self):
        """
        Returns the translated algorithm name, which should be used for any
        user-visible display of the algorithm name.
        """
        return self.tr(self.name())

    def group(self):
        """
        Returns the name of the group this algorithm belongs to. This string
        should be localised.
        """
        return self.tr('Spatial Analysis')

    def groupId(self):
        """
        Returns the unique ID of the group this algorithm belongs to. This
        string should be fixed for the algorithm, and must not be localised.
        The group id should be unique within each provider. Group id should
        contain lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'spatial_analysis'

    def tr(self, string):
        return QCoreApplication.translate('Processing', string)

    def createInstance(self):
        return EchantillonageVecteurPoint()
