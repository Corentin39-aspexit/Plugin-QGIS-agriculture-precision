# -*- coding: utf-8 -*-

"""
/***************************************************************************
 AgriculturePrecision
                                 A QGIS plugin
 Chaines de traitement
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2020-07-21
        copyright            : (C) 2020 by ASPEXIT
        email                : cleroux@aspexit.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

__author__ = 'ASPEXIT'
__date__ = '2020-07-21'
__copyright__ = '(C) 2020 by ASPEXIT'

# This will get replaced with a git SHA1 when you do a git archive

__revision__ = '$Format:%H$'



from qgis.PyQt.QtCore import QCoreApplication
from qgis.core import (QgsProcessing,
                       QgsFeatureSink,
                       QgsProcessingAlgorithm,
                       QgsApplication,
                       QgsRasterLayer,
                       QgsProcessingParameterNumber,
                       QgsProcessingParameterRasterLayer,
                       QgsProcessingParameterVectorDestination,
                       QgsProcessingParameterEnum,)

from .functions.fonctions_repartition import *

from qgis import processing 

class EchantillonageRaster(QgsProcessingAlgorithm):
    """
    
    """
    
    OUTPUT= 'OUTPUT'
    INPUT = 'INPUT'
    INPUT_METHOD_ECH = 'INPUT_METHOD_ECH'
    INPUT_METHOD_CLASS = 'INPUT_METHOD_CLASS'
    INPUT_N_CLASS='INPUT_N_CLASS'
    INPUT_ECHANTILLON = 'INPUT_ECHANTILLON'

    def initAlgorithm(self, config):
        """
        Here we define the inputs and output of the algorithm, along
        with some other properties.
        """
        
        self.addParameter(
            QgsProcessingParameterRasterLayer(
                self.INPUT,
                self.tr('Couche raster a traiter')
            )
        )

       
        self.addParameter(
            QgsProcessingParameterEnum(
                self.INPUT_METHOD_ECH,
                self.tr("Choix de la méthode d'echantillonage"),
                ['Echantillonnage seulement', 'Classer puis echantillonner']               
            )
        )
        
        
        self.addParameter(
            QgsProcessingParameterEnum(
                self.INPUT_METHOD_CLASS,
                self.tr('Choix de la méthode de classification'),
                ['Quantiles', 'Intervalles Egaux']#, 'Jenks']                
            )
        )
        
        self.addParameter(
            QgsProcessingParameterNumber(
                self.INPUT_N_CLASS, 
                self.tr('Nombre de classes souhaité'),
                QgsProcessingParameterNumber.Integer,
                4,
                False,
                2,
                10
            )
        )
    
        
        self.addParameter(
            QgsProcessingParameterNumber(
                self.INPUT_ECHANTILLON, 
                self.tr("Taille de l'échantillon"),
                QgsProcessingParameterNumber.Integer,
                10,
                False,
                2,
                100
            )
        )
        
        self.addParameter(
            QgsProcessingParameterVectorDestination(
                self.OUTPUT,
                self.tr('Couche raster classee')
            )
        )
        
        

    def processAlgorithm(self, parameters, context, feedback):
        """
        Here is where the processing itself takes place.
        """
        
        layer_temp=self.parameterAsRasterLayer(parameters,self.INPUT,context) 
        fn = self.parameterAsOutputLayer(parameters,self.OUTPUT,context)
        method = self.parameterAsEnum(parameters,self.INPUT_METHOD_ECH,context)
        
        if method == 0 : 
          # Pixels de raster en points
            alg_params = {
                'FIELD_NAME': 'VALUE',
                'INPUT_RASTER': parameters[self.INPUT],
                'RASTER_BAND': 1,
                'OUTPUT': QgsProcessing.TEMPORARY_OUTPUT
            }
            point_layer = processing.run('native:pixelstopoints', alg_params, context=context, feedback=feedback, is_child_algorithm=True)

            # Sélection aléatoire
            alg_params = {
                'INPUT': point_layer['OUTPUT'],
                'METHOD': 0,
                'NUMBER': parameters[self.INPUT_ECHANTILLON]
            }
            selection_aleatoire = processing.run('qgis:randomselection', alg_params, context=context, feedback=feedback, is_child_algorithm=True)

            # Extraire les entités sélectionnées
            alg_params = {
                'INPUT': selection_aleatoire['OUTPUT'],
                'OUTPUT': QgsProcessing.TEMPORARY_OUTPUT
            }
            extraction_selection = processing.run('native:saveselectedfeatures', alg_params, context=context, feedback=feedback, is_child_algorithm=True)

            
            
            
            
            

        else :
        
            alg_params = {
                'INPUT': parameters[self.INPUT],
                'INPUT_METHOD': parameters[self.INPUT_METHOD_CLASS],
                'INPUT_N_CLASS': parameters[self.INPUT_N_CLASS],
                'OUTPUT': QgsProcessing.TEMPORARY_OUTPUT
            }
            layer_classee = processing.run('Agriculture de précision:Classification raster', alg_params, context=context, feedback=feedback, is_child_algorithm=True)


            # Pixels de raster en points
            alg_params = {
                'FIELD_NAME': 'VALUE',
                'INPUT_RASTER': layer_classee['OUTPUT'],
                'RASTER_BAND': 1,
                'OUTPUT': QgsProcessing.TEMPORARY_OUTPUT
            }
            layer_point = processing.run('native:pixelstopoints', alg_params, context=context, feedback=feedback, is_child_algorithm=True)


            # Extraire par attribut
            alg_params = {
                'FIELD': 'VALUE',
                'INPUT': layer_point['OUTPUT'],
                'OPERATOR': 1,
                'VALUE': 'nan',
                'OUTPUT': QgsProcessing.TEMPORARY_OUTPUT
            }
            extraction_attributs = processing.run('native:extractbyattribute', alg_params, context=context, feedback=feedback, is_child_algorithm=True)


            # Sélection aléatoire parmi des sous-ensembles
            alg_params = {
                'FIELD': 'VALUE',
                'INPUT': extraction_attributs['OUTPUT'],
                'METHOD': 0,
                'NUMBER': parameters[self.INPUT_ECHANTILLON]
            }
            selection_aleatoire = processing.run('qgis:randomselectionwithinsubsets', alg_params, context=context, feedback=feedback, is_child_algorithm=True)

            # Extraire les entités sélectionnées
            alg_params = {
                'INPUT': selection_aleatoire['OUTPUT'],
                'OUTPUT': QgsProcessing.TEMPORARY_OUTPUT
            }
            extraction_selection = processing.run('native:saveselectedfeatures', alg_params, context=context, feedback=feedback, is_child_algorithm=True)

        # Ajouter les coordonnees dans un vecteur
        alg_params = {
            'CRS': 'ProjectCrs',
            'INPUT': extraction_selection['OUTPUT'],
            'PREFIX': '',
            'OUTPUT': parameters[self.OUTPUT]
        }
        ajout_xy = processing.run('native:addxyfields', alg_params, context=context, feedback=feedback, is_child_algorithm=True)
       
                    
      
        return{self.OUTPUT : fn} 
   
    def name(self):
        """
        Returns the algorithm name, used for identifying the algorithm. This
        string should be fixed for the algorithm, and must not be localised.
        The name should be unique within each provider. Names should contain
        lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return "Echantillonnage sur un raster"

    def displayName(self):
        """
        Returns the translated algorithm name, which should be used for any
        user-visible display of the algorithm name.
        """
        return self.tr(self.name())

    def group(self):
        """
        Returns the name of the group this algorithm belongs to. This string
        should be localised.
        """
        return self.tr('Action sur Raster')

    def groupId(self):
        """
        Returns the unique ID of the group this algorithm belongs to. This
        string should be fixed for the algorithm, and must not be localised.
        The group id should be unique within each provider. Group id should
        contain lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'action_sur_raster'

    def tr(self, string):
        return QCoreApplication.translate('Processing', string)

    def createInstance(self):
        return EchantillonageRaster()
