# -*- coding: utf-8 -*-

"""
/***************************************************************************
 AgriculturePrecision
                                 A QGIS plugin
 Chaines de traitement
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2020-07-21
        copyright            : (C) 2020 by ASPEXIT
        email                : cleroux@aspexit.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

__author__ = 'ASPEXIT'
__date__ = '2020-07-21'
__copyright__ = '(C) 2020 by ASPEXIT'

# This will get replaced with a git SHA1 when you do a git archive

__revision__ = '$Format:%H$'

from qgis.core import QgsProcessingProvider
from .algorithms.classification_raster import ClassifyRaster
from .algorithms.enveloppe_convexe_points import EnveloppeConvexePoints
from .algorithms.echantillonnage_raster import EchantillonnageRaster
from .algorithms.filtrage_donnees import FiltreDonnees
from .algorithms.correlations import Correlation
from .algorithms.interpolation_points import InterpolationPoints
from .algorithms.echantillonnage_polygone import EchantillonnagePolygone
from .algorithms.zonage_par_classif import ZonageClassification
from .algorithms.tesselations import Tesselations
from .algorithms.xml_to_shp import XmlToShp
#from .algorithms.indice_zonage import IndiceZonage

class AgriculturePrecisionProvider(QgsProcessingProvider):

    def __init__(self):
        """
        Default constructor.
        """
        QgsProcessingProvider.__init__(self)

    def unload(self):
        """
        Unloads the provider. Any tear-down steps required by the provider
        should be implemented here.
        """
        pass

    def loadAlgorithms(self):
        """
        Loads all algorithms belonging to this provider.
        """
        #Raster
        self.addAlgorithm(ClassifyRaster())
        self.addAlgorithm(EchantillonnageRaster())
        self.addAlgorithm(ZonageClassification())
        #Vecteur        
        self.addAlgorithm(Correlation())
        self.addAlgorithm(EnveloppeConvexePoints())
        self.addAlgorithm(EchantillonnagePolygone())
        self.addAlgorithm(FiltreDonnees())
        self.addAlgorithm(Tesselations())
        self.addAlgorithm(InterpolationPoints())
        #self.addAlgorithm(IndiceZonage())
        #Autre
        self.addAlgorithm(XmlToShp())
        
        

    def id(self):
        """
        Returns the unique provider id, used for identifying the provider. This
        string should be a unique, short, character only string, eg "qgis" or
        "gdal". This string should not be localised.
        """
        return 'Agriculture de précision'

    def name(self):
        """
        Returns the provider name, which is used to describe the provider
        within the GUI.

        This string should be short (e.g. "Lastools") and localised.
        """
        return self.tr('Agriculture de précision')

    def icon(self):
        """
        Should return a QIcon which is used for your provider inside
        the Processing toolbox.
        """
        return QgsProcessingProvider.icon(self)

    def longName(self):
        """
        Returns the a longer version of the provider name, which can include
        extra details such as version numbers. E.g. "Lastools LIDAR tools
        (version 2.2.1)". This string should be localised. The default
        implementation returns the same string as name().
        """
        return self.name()
